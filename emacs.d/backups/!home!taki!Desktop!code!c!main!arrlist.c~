#include "arrlist.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

LIST * mklist() {
    LIST *ls = malloc(sizeof *ls);
    ls->size = 0;
    ls->first = 2;
    ls->last = 3;
    ls->capacity = 6;
    ls->arr = malloc(sizeof(int[ls->capacity]));
    return ls;
}

void resize(LIST *ls) {
    int newcap;
    if ((float)ls->size / ls->capacity >= 0.65) // 75% doesn't work; first and last becomes same
        newcap = ls->capacity * 1.6;
    else if ((float)ls->size / ls->capacity <= 0.25)
        newcap = ls->capacity * 0.75;
    else return;
    
    int *newarr = malloc(sizeof(int[newcap]));
    int f = (newcap - ls->size) / 2;

    if (ls->first <= ls->last) // no wrap
        memcpy(newarr+f, ls->arr+ls->first+1, sizeof(int)*ls->size);

    else {
        // first to the end
        memcpy(newarr + f,
               ls->arr + ls->first + 1,
               sizeof(int) * (ls->capacity - (ls->first+1)));

        // start to the last
        memcpy(newarr+f + ls->capacity-(ls->first+1), // begining after previous cpy
               ls->arr,                               // start from 0
               sizeof(int)*ls->last);
    }

    free(ls->arr);
    ls->arr = newarr;
    ls->capacity = newcap;
    ls->first = f - 1;
    ls->last = f + ls->size;
}

void append(LIST *ls, int x) {
    ls->size++;
    ls->arr[ls->last] = x;
    ls->last++;
    if (ls->last == ls->capacity) ls->last = 0;
    resize(ls);
}

int rmlast(LIST *ls) {
    assert(ls->size > 0 && "Trying to remove from empty list.");

    ls->size--;
    ls->last--;
    if (ls->last < 0) ls->last = ls->capacity-1;
    int last = ls->arr[ls->last];
    resize(ls);
    return last;
}

void printls(LIST *ls) {
    if (ls->first <= ls->last)
        for (int i = ls->first+1; i < ls->last; i++)
            printf("%d ", ls->arr[i]);

    else {
        for (int i = ls->first+1; i < ls->capacity; i++)
            printf("%d ", ls->arr[i]);
        for (int i = 0; i < ls->last; i++)
            printf("%d ", ls->arr[i]);
    }

    putchar('\n');
}

void printarr(LIST *ls) {
    for(int i = 0; i < ls->capacity; i++)
        printf("%d ", ls->arr[i]);
    putchar('\n');
}

void freels(LIST *ls) {
    free(ls->arr);
    free(ls);
}
