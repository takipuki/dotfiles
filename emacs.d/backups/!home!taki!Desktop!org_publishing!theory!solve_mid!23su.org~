#+setupfile: /home/taki/Desktop/code/c/spl/setup.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../clean.css"/>
#+HTML_HEAD: <style type="text/css">
#+HTML_HEAD:  ol { list-style-type: lower-alpha; }
#+HTML_HEAD:  li { margin: 1em 0; }
#+HTML_HEAD: </style>

#+title: 23su

* 01
a) =is-Val=: hyphens not allowed \\
   =while=: reserved keyword \\
   =CSE 1111=: spaces not allowed

b) =float a = 5.0= \\
   =int b = 0= \\
   =int e = 5= \\
   =int c = 11 + 5 = 16= \\
   =double result = 1.0=

c) =a = 0=, =b = 0=:
   #+begin_example
   Pattern
   FizzBuzz
   #+end_example

   \\
   =a = -1=, =b = -7=:
   #+begin_example
   Fizz
   #+end_example

* 02
a) Rewrite using if-else
   #+begin_src C
   char rank;
   scanf("%c", &rank);
   int bonus = 0;
   if (rank == 'p') {
       bonus += 20;
       bonus += 20;
       bonus += 20;
   } else if (rank == 'g') {
       bonus += 20;
       bonus += 20;
   } else if (rank == 's') {
       bonus += 20;
   } else {
       bonus += 10;
   }
   printf("\n%d", bonus);
   #+end_src

b) Trace table
   #+begin_src C -n :results table output :exports none
   #include <stdio.h>
   void main() {
       int i = 2, n = 10, j = 0;
       printf("j , j > i , j%2 == 0 ,  i ,  n \n");
       for (j = n; j > i; j--) {
           printf("%d , %d ,", j, j>i);
           printf("%d , ", j%2==0);
           if (j % 2 == 0) i++;
           else n--;
       i += 2;
       printf("%d , %d \n", i, n);
       }   
   }
   #+end_src

   |  j | j > i | j%2 == 0 |  i |  n |
   |----+-------+----------+----+----|
   |  0 |       |          |  2 | 10 |
   | 10 | TRUE  | TRUE     |  5 | 10 |
   |  9 | TRUE  | FALSE    |  7 |  9 |
   |  8 | TRUE  | TRUE     | 10 |  9 |
   |  7 | FALSE |          |    |    |

* 03
a) Pattern
   #+begin_src C -n :exports code :results output
   #include <stdio.h>

   void main() {
       int n = 4;

       int spaces = n - 1;
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < spaces; j++) putchar(' ');
           spaces--;
           for (int j = 0; j < n+1; j++) putchar('*');
           putchar('\n');
       }
   }
   #+end_src

b) Rewrite using while
   #+begin_src C :exports code
   int arr[10] = {0};
   int k = 15;

   int i = 1;
   while (i < 6) {
       arr[i] = ++k-2;
       k++;
       i += 2;
   }

   int c = 0;
   i = 6;
   while (i < 10) {
       int j = 9;
       while (j >= i) {
           arr[j] = ++c;
           j--;
       }
       i++;
   }

   i = 0;
   while (i < 10) {
       if (i%2 == 0) arr[i] = ++k;
       i++;
   }
   #+end_src

* 04
a) WAP
   #+begin_src C -n :exports code
   #include <stdio.h>

   int main() {
       int n; scanf("%d", &n);
       int arr[n];

       for (int i = 0; i < n; i++) scanf("%d", &arr[i]);

       int half = n/2;
       for (int i = 0; i < half/2; i++) {
           int tmp = arr[i];
           arr[i] = arr[half-1 - i];
           arr[half-1 - i] = tmp;
       }

       for (int i = half+1; i < (half+1)+(half/2); i++) {
           int tmp = arr[i];
           arr[i] = arr[n-1 - (i - (half+1))];
           arr[n-1 - (i - (half+1))] = tmp;
       }
    
       for (int i = 0; i < n; i++) printf("%d ", arr[i]);
       putchar('\n');
   }
   #+end_src

b) Flowchart

* 05
a) Trace table

   Outer loop
   | i | i < 3 | jump | A     | B        |
   |---+-------+------+-------+----------|
   |   |       |  100 | 3,2,1 | 10,20,30 |
   | 0 | TRUE  |    9 | 4,2,1 | 19,20,30 |
   | 1 | TRUE  |   13 | 4,3,1 | 19,26,30 |
   | 2 | TRUE  |   16 | 4,3,2 | 19,26,33 |
   | 3 | FALSE |      |       |          |
   
   Inner loop for =i = 0=
   | j | j < 3 | B        | jump |
   |---+-------+----------+------|
   | 0 | TRUE  | 13,20,30 |    6 |
   | 1 | TRUE  | 16,20,30 |    8 |
   | 2 | TRUE  | 19,20,30 |    9 |
   | 3 | FALSE |          |      |
   
   Inner loop for =i = 1=
   | j | j < 3 | B        | jump |
   |---+-------+----------+------|
   | 0 | TRUE  | 19,22,30 |   11 |
   | 1 | TRUE  | 19,24,30 |   12 |
   | 2 | TRUE  | 19,26,30 |   13 |
   | 3 | FALSE |          |      |

   Inner loop for =i = 2=
   | j | j < 3 | B        | jump |
   |---+-------+----------+------|
   | 0 | TRUE  | 19,26,31 |   15 |
   | 1 | TRUE  | 19,26,32 |   16 |
   | 2 | TRUE  | 19,26,33 |   16 |
   | 3 | FALSE |          |      |

b) Trace table

   | i |  x | sum |
   |---+----+-----|
   |   |  0 |   0 |
   | 0 | 13 |  13 |
   | 1 | 23 |  47 |
   | 2 | 53 | 119 |
   | 3 | 61 | 217 |

   Inner loop for =i = 0=
   | j |  x | sum |
   |---+----+-----|
   | 0 |  0 |   0 |
   | 1 |  0 |   0 |
   | 2 |  0 |   0 |
   | 3 | 13 |  13 |

   Inner loop for =i = 1=
   | j |  x | sum |
   |---+----+-----|
   | 0 | 13 |  13 |
   | 1 | 13 |  13 |
   | 2 | 11 |  24 |
   | 3 | 23 |  47 |

   Inner loop for =i = 2=
   | j |  x | sum |
   |---+----+-----|
   | 0 | 23 |  47 |
   | 1 | 19 |  66 |
   | 2 | 19 |  66 |
   | 3 | 53 | 119 |

   Inner loop for =i = 3=
   | j |  x | sum |
   |---+----+-----|
   | 0 | 37 | 156 |
   | 1 | 37 | 156 |
   | 2 | 37 | 156 |
   | 3 | 61 | 217 |

   #+begin_src C :exports none
   int arr[][4] = {{5,7,3,13},
                   {31,2,11,23},
                   {17,19,43,53},
                   {37,47,29,61}};
   int n = 4, sum = 0, x = 0;
   for (int i = 0; i < n; i++)
       for (int j = 0; j < n; j++)
           if (j == n-1 || i+j == n-1) {
               x = arr[i][j];
               sum += x;
           }
   printf("%d %d\n", x, sum);
   #+end_src
