(undo-tree-save-format-version . 1)
"92bf7163efdb109da7a5bcfbeab09f06587cf619"
[nil nil nil nil (26052 30117 524302 110000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (wrap-prefix "" line-prefix "" fontified nil)) . -41) (1 . 42) (t . -1)) nil (26052 30117 524301 411000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t wrap-prefix "" line-prefix "" fontified t)) . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1)) nil (26052 30117 524300 483000) 0 nil])
([nil nil ((40 . 41) 24) nil (26052 30117 524295 502000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "" line-prefix "" fontified t)) . 40) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1)) nil (26052 30117 524294 445000) 0 nil])
([nil nil ((40 . 41) 24) nil (26052 30117 524277 707000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "" line-prefix "" fontified t)) . 40) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1)) nil (26052 30117 524276 424000) 0 nil])
([nil nil ((#("
#+OPTIONS: toc:t" 0 1 (wrap-prefix "" line-prefix "" fontified t) 1 17 (face org-meta-line wrap-prefix "" line-prefix "" fontified t font-lock-fontified t)) . 23) (undo-tree-id46 . -1) (undo-tree-id47 . -16) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -17) (undo-tree-id119 . -17) (undo-tree-id120 . -17) (undo-tree-id121 . -17) (undo-tree-id122 . -17) (undo-tree-id123 . -17) (undo-tree-id124 . -17) (undo-tree-id125 . -17) (undo-tree-id126 . -17) (undo-tree-id127 . -17) (undo-tree-id128 . -17) (undo-tree-id129 . -17) (undo-tree-id130 . -17) (undo-tree-id131 . -17) (undo-tree-id132 . -17) (undo-tree-id133 . -17) (undo-tree-id134 . -17) (undo-tree-id135 . -17) (undo-tree-id136 . -17) (undo-tree-id137 . -17) (undo-tree-id138 . -17) (undo-tree-id139 . -17) (undo-tree-id140 . -17) (undo-tree-id141 . -17) (undo-tree-id142 . -17) (undo-tree-id143 . -17) (undo-tree-id144 . -17) (undo-tree-id145 . -17) (undo-tree-id146 . -17) (undo-tree-id147 . -17) (undo-tree-id148 . -17) (undo-tree-id149 . -17) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -17) (undo-tree-id165 . -17) (undo-tree-id166 . -17) (undo-tree-id167 . -17) (undo-tree-id168 . -17) (undo-tree-id169 . -17) (undo-tree-id170 . -17) (undo-tree-id171 . -17) (undo-tree-id172 . -17) (undo-tree-id173 . -17) (undo-tree-id174 . -17) (undo-tree-id175 . -17) (undo-tree-id176 . -17) (undo-tree-id177 . -17) (undo-tree-id178 . -17) (undo-tree-id179 . -17) (undo-tree-id180 . -17) (undo-tree-id181 . -17) (undo-tree-id182 . -17) (undo-tree-id183 . -17) (undo-tree-id184 . -17) (undo-tree-id185 . -17) (undo-tree-id186 . -17) (undo-tree-id187 . -17) (undo-tree-id188 . -17) (undo-tree-id189 . -17) (undo-tree-id190 . -17) (undo-tree-id191 . -17) (undo-tree-id192 . -17) (undo-tree-id193 . -17) (undo-tree-id194 . -17) (undo-tree-id195 . -17) (undo-tree-id196 . -17) (undo-tree-id197 . -17) (undo-tree-id198 . -17) (undo-tree-id199 . -17) (undo-tree-id200 . -17) (undo-tree-id201 . -17) (undo-tree-id202 . -17) (undo-tree-id203 . -17) (undo-tree-id204 . -17) (undo-tree-id205 . -17) (undo-tree-id206 . -17) (undo-tree-id207 . -17) (undo-tree-id208 . -17) (undo-tree-id209 . -17) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -17) 25) nil (26052 30117 524259 648000) 0 nil])
([nil nil ((47 . 58) (#("/" 0 1 (face org-document-title font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -47) (undo-tree-id20 . -1) (#(" " 0 1 (face org-document-title font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -48) (undo-tree-id21 . -1) (#(" " 0 1 (face org-document-title font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -49) (undo-tree-id22 . -1) 50 (45 . 50) (#("s" 0 1 (face org-document-title font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -45) (undo-tree-id23 . -1) 46 (39 . 46) (#("l" 0 1 (face org-document-title font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -39) (undo-tree-id24 . -1) (#("a" 0 1 (face org-document-title font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -40) (undo-tree-id25 . -1) (#("n" 0 1 (face org-document-title font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -41) (undo-tree-id26 . -1) 42 (41 . 42) (34 . 41) (27 . 34) (#("TIT" 0 3 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -27) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) 30 (27 . 30) (#("m" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -27) (undo-tree-id30 . -1) (#("s" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -28) (undo-tree-id31 . -1) (#("i" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -29) (undo-tree-id32 . -1) 30 (27 . 30) (#("t" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -27) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("u" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -28) (undo-tree-id36 . -1) (#("k" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -29) (undo-tree-id37 . -1) (#("i" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -30) (undo-tree-id38 . -1) (#("t" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -31) (undo-tree-id39 . -1) (#("a" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -32) (undo-tree-id40 . -1) (#("k" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -33) (undo-tree-id41 . -1) (#("i" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -34) (undo-tree-id42 . -1) 35 (33 . 35) (27 . 33) (#("M" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -27) (undo-tree-id43 . -1) (#("i" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -28) (undo-tree-id44 . -1) (#("s" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix "" line-prefix "" fontified t)) . -29) (undo-tree-id45 . -1) 30 (25 . 30) (24 . 25) (23 . 24) 2) nil (26052 30117 524160 215000) 0 nil])
([nil nil ((64 . 85) (62 . 64) (#("D" 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -62) (undo-tree-id12 . -1) (#("e" 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -63) (undo-tree-id13 . -1) (#("c" 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -64) (undo-tree-id14 . -1) (#("i" 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -65) (undo-tree-id15 . -1) (#("m" 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -66) (undo-tree-id16 . -1) (#("a" 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -67) (undo-tree-id17 . -1) (#("n" 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -68) (undo-tree-id18 . -1) (#(" " 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -69) (undo-tree-id19 . -1) 70 (60 . 70) (59 . 60) (58 . 59) 35) nil (26052 30117 524149 626000) 0 nil])
([nil nil ((62 . 63) (#("C" 0 1 (face org-level-1 font-lock-fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 62) (undo-tree-id11 . -1)) nil (26052 30117 524145 962000) 0 nil])
([nil nil ((62 . 63) (#("c" 0 1 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 62) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1)) nil (26052 30117 524144 756000) 0 nil])
([nil nil ((98 . 102) (86 . 109) (85 . 86) 60) nil (26052 30117 524141 950000) 0 nil])
([nil nil ((nil rear-nonsticky nil 102 . 103) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -119) (102 . 120) 101) nil (26052 30117 524141 265000) 0 nil])
([nil nil ((#("
#+OPTIONS: toc:t
" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t rear-nonsticky nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1 17 (src-block t face (org-block) font-lock-multiline t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t) 17 18 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 102) (undo-tree-id0 . -1) (undo-tree-id1 . -17) (undo-tree-id2 . -1) (119 . 120) (nil rear-nonsticky t 102 . 103)) nil (26052 30117 524140 19000) 0 nil])
([nil nil ((102 . 103) 101) nil (26052 30117 524119 564000) 0 nil])
([nil nil ((nil rear-nonsticky nil 764 . 765) (nil fontified nil 764 . 765) (nil fontified nil 745 . 764) (nil fontified nil 719 . 745) (nil fontified nil 718 . 719) (nil fontified nil 663 . 718) (nil fontified nil 628 . 663) (nil fontified nil 600 . 628) (nil fontified nil 599 . 600) (nil fontified nil 593 . 599) (nil fontified nil 575 . 593) (nil fontified nil 552 . 575) (nil fontified nil 538 . 552) (nil fontified nil 537 . 538) (nil fontified nil 531 . 537) (nil fontified nil 513 . 531) (nil fontified nil 458 . 513) (nil fontified nil 425 . 458) (nil fontified nil 424 . 425) (nil fontified nil 393 . 424) (nil fontified nil 376 . 393) (nil fontified nil 359 . 376) (nil fontified nil 358 . 359) (nil fontified nil 356 . 358) (nil fontified nil 279 . 356) (nil fontified nil 248 . 279) (nil fontified nil 247 . 248) (nil fontified nil 227 . 247) (nil fontified nil 191 . 227) (nil fontified nil 190 . 191) (nil fontified nil 123 . 190) (nil fontified nil 122 . 123) (nil fontified nil 103 . 122) (103 . 765)) nil (26052 30117 524115 435000) 0 nil])
([nil nil ((#(" -n" 0 3 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 99) (undo-tree-id363 . -2) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (t 26052 30117 542429 440000)) nil (26052 31323 379393 138000) 0 nil])
([nil nil ((774 . 775) (773 . 774) (t 26052 31323 399103 445000) 773) nil (26052 31377 815337 653000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1437 . 1438) (nil fontified nil 1436 . 1438) (nil fontified nil 1417 . 1436) (nil fontified nil 1391 . 1417) (nil fontified nil 1390 . 1391) (nil fontified nil 1335 . 1390) (nil fontified nil 1300 . 1335) (nil fontified nil 1272 . 1300) (nil fontified nil 1271 . 1272) (nil fontified nil 1265 . 1271) (nil fontified nil 1247 . 1265) (nil fontified nil 1224 . 1247) (nil fontified nil 1210 . 1224) (nil fontified nil 1209 . 1210) (nil fontified nil 1203 . 1209) (nil fontified nil 1185 . 1203) (nil fontified nil 1130 . 1185) (nil fontified nil 1097 . 1130) (nil fontified nil 1096 . 1097) (nil fontified nil 1065 . 1096) (nil fontified nil 1048 . 1065) (nil fontified nil 1031 . 1048) (nil fontified nil 1030 . 1031) (nil fontified nil 1028 . 1030) (nil fontified nil 951 . 1028) (nil fontified nil 920 . 951) (nil fontified nil 919 . 920) (nil fontified nil 899 . 919) (nil fontified nil 863 . 899) (nil fontified nil 862 . 863) (nil fontified nil 795 . 862) (nil fontified nil 794 . 795) (nil fontified nil 775 . 794) (775 . 1438)) nil (26052 31377 815336 37000) 0 nil])
([nil nil ((#("#include <stdio.h>

char symbols[36]; // maximum base 36; digits (0-9) and alpha (A-Z)

void dec_to_base(int n, int base) {
    if (!n) return;

    dec_to_base(n/base, base);
    putchar(symbols[n % base]);    // least significant bit so printing last
}

int main(void) {
    int base, n;
    scanf(\"%d %d\", &base, &n);

    if (base < 2 || base > 36) {
        printf(\"Only 2 to 36 bases are supported.\\n\");
        return 0;
    }

    if (!n) {
        printf(\"0\\n\");
        return 0;
    }

    // initializing symbols
    for (int i = 0; i < base; i++)
        symbols[i] = (i >= 10) ? 'A' + i-10 : '0' + i;

    dec_to_base(n, base);
    putchar('\\n');
}
" 0 19 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 20 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 20 87 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 87 88 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 88 124 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 124 144 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 144 145 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 145 176 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 176 253 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 253 255 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 255 256 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 256 273 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 273 290 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 290 321 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 321 322 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 322 355 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 355 410 (fontified nil wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 410 428 (fontified nil wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 428 434 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 434 435 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 435 449 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 449 472 (fontified nil wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 472 490 (fontified nil wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 490 496 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 496 497 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 497 525 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 525 560 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 560 615 (fontified nil wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 615 616 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 616 642 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 642 661 (fontified nil wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 661 662 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 662 663 (rear-nonsticky nil fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 775) (undo-tree-id384 . -662) (nil fontified t 775 . 794) (nil fontified t 794 . 795) (nil fontified t 795 . 862) (nil fontified t 862 . 863) (nil fontified t 863 . 899) (nil fontified t 899 . 919) (nil fontified t 919 . 920) (nil fontified t 920 . 951) (nil fontified t 951 . 1028) (nil fontified t 1028 . 1030) (nil fontified t 1030 . 1031) (nil fontified t 1031 . 1048) (nil fontified t 1048 . 1065) (nil fontified t 1065 . 1096) (nil fontified t 1096 . 1097) (nil fontified t 1097 . 1130) (nil fontified t 1130 . 1185) (nil fontified t 1185 . 1203) (nil fontified t 1203 . 1209) (nil fontified t 1209 . 1210) (nil fontified t 1210 . 1224) (nil fontified t 1224 . 1247) (nil fontified t 1247 . 1265) (nil fontified t 1265 . 1271) (nil fontified t 1271 . 1272) (nil fontified t 1272 . 1300) (nil fontified t 1300 . 1335) (nil fontified t 1335 . 1390) (nil fontified t 1390 . 1391) (nil fontified t 1391 . 1417) (nil fontified t 1417 . 1436) (nil rear-nonsticky t 1437 . 1438)) nil (26052 31377 815331 485000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 773) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 774) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1)) nil (26052 31377 815326 795000) 0 nil])
([nil current ((99 . 102) (t 26052 31323 399103 445000)) nil (26052 31377 815311 72000) 0 nil])
nil
