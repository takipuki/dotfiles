(undo-tree-save-format-version . 1)
"4b55b911dfa897b975a8819293eb1e6ed3040f11"
[nil nil nil nil (26052 28486 14244 559000) 0 nil]
([nil nil ((2 . 3) (1 . 2) (1 . 2) (t 26052 22933 651111 992000)) nil (26052 28486 14243 818000) 0 nil])
([nil nil ((226 . 227) (225 . 226) (224 . 225) 224) nil (26052 28486 14243 99000) 0 nil])
([nil nil ((225 . 226) (#("&" 0 1 (face font-lock-comment-face fontified t)) . 225)) nil (26052 28486 14242 454000) 0 nil])
([nil nil ((nil rear-nonsticky nil 227 . 228) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -451) (227 . 452) 225) nil (26052 28486 14241 967000) 0 nil])
([nil nil ((#("/*
" 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (face font-lock-comment-face fontified t)) . 228) (undo-tree-id2222 . -2)) nil (26052 28486 14241 196000) 0 nil])
([nil nil ((#("    int lines = n / 2;
    for (int i = 1; i <= lines; i++)
        printf(\"%*c %*c\\n\", i, '*', 2*(lines-i)+1, '*');

    printf(\" %*c\\n\", lines, '*');
" 0 4 (fontified t) 4 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face c-type c-decl-id-start fontified t) 7 8 (fontified t) 8 13 (face font-lock-variable-name-face fontified t) 13 27 (fontified t) 27 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 34 (face font-lock-type-face fontified t) 34 35 (face font-lock-type-face c-type c-decl-id-start fontified t) 35 36 (fontified t) 36 37 (face font-lock-variable-name-face fontified t) 37 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t) 59 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 86 (face font-lock-string-face fontified t) 86 91 (fontified t) 91 94 (face font-lock-string-face fontified t) 94 98 (fontified t) 98 99 (face (rainbow-delimiters-depth-3-face) fontified t) 99 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-3-face) fontified t) 107 111 (fontified t) 111 114 (face font-lock-string-face fontified t) 114 115 (face (rainbow-delimiters-depth-2-face) fontified t) 115 128 (fontified t) 128 129 (face (rainbow-delimiters-depth-2-face) fontified t) 129 137 (face font-lock-string-face fontified t) 137 146 (fontified t) 146 149 (face font-lock-string-face fontified t) 149 150 (face (rainbow-delimiters-depth-2-face) fontified t) 150 152 (fontified t)) . 294) (undo-tree-id2065 . -118) (undo-tree-id2066 . -151) (undo-tree-id2067 . -117) (undo-tree-id2068 . -117) (undo-tree-id2069 . -23) (undo-tree-id2070 . -23) (undo-tree-id2071 . -23) (undo-tree-id2072 . -23) (undo-tree-id2073 . -23) (undo-tree-id2074 . -23) (undo-tree-id2075 . -23) (undo-tree-id2076 . -23) (undo-tree-id2077 . -23) (undo-tree-id2078 . -23) (undo-tree-id2079 . -23) (undo-tree-id2080 . -23) (undo-tree-id2081 . -23) (undo-tree-id2082 . -23) (undo-tree-id2083 . -60) (undo-tree-id2084 . -60) (undo-tree-id2085 . -60) (undo-tree-id2086 . -60) (undo-tree-id2087 . -60) (undo-tree-id2088 . -60) (undo-tree-id2089 . -60) (undo-tree-id2090 . -117) (undo-tree-id2091 . -117) (undo-tree-id2092 . -117) (undo-tree-id2093 . -117) (undo-tree-id2094 . -117) (undo-tree-id2095 . -117) (undo-tree-id2096 . -117) (undo-tree-id2097 . -118) (undo-tree-id2098 . -118) (undo-tree-id2099 . -118) (undo-tree-id2100 . -118) (undo-tree-id2101 . -118) (undo-tree-id2102 . -118) (undo-tree-id2103 . -118) (undo-tree-id2104 . -118) (undo-tree-id2105 . -118) (undo-tree-id2106 . -118) (undo-tree-id2107 . -118) (undo-tree-id2108 . -118) (undo-tree-id2109 . -118) (undo-tree-id2110 . -118) (undo-tree-id2111 . -117) (undo-tree-id2112 . -117) (undo-tree-id2113 . -117) (undo-tree-id2114 . -117) (undo-tree-id2115 . -117) (undo-tree-id2116 . -117) (undo-tree-id2117 . -117) (undo-tree-id2118 . -117) (undo-tree-id2119 . -117) (undo-tree-id2120 . -117) (undo-tree-id2121 . -117) (undo-tree-id2122 . -117) (undo-tree-id2123 . -117) (undo-tree-id2124 . -117) (undo-tree-id2125 . -60) (undo-tree-id2126 . -60) (undo-tree-id2127 . -60) (undo-tree-id2128 . -60) (undo-tree-id2129 . -60) (undo-tree-id2130 . -60) (undo-tree-id2131 . -60) (undo-tree-id2132 . -23) (undo-tree-id2133 . -23) (undo-tree-id2134 . -23) (undo-tree-id2135 . -23) (undo-tree-id2136 . -23) (undo-tree-id2137 . -23) (undo-tree-id2138 . -23) (undo-tree-id2139 . -118) (undo-tree-id2140 . -23) (undo-tree-id2141 . -23) (undo-tree-id2142 . -23) (undo-tree-id2143 . -23) (undo-tree-id2144 . -23) (undo-tree-id2145 . -23) (undo-tree-id2146 . -23) (undo-tree-id2147 . -23) (undo-tree-id2148 . -23) (undo-tree-id2149 . -23) (undo-tree-id2150 . -23) (undo-tree-id2151 . -23) (undo-tree-id2152 . -23) (undo-tree-id2153 . -23) (undo-tree-id2154 . -23) (undo-tree-id2155 . -23) (undo-tree-id2156 . -23) (undo-tree-id2157 . -23) (undo-tree-id2158 . -23) (undo-tree-id2159 . -23) (undo-tree-id2160 . -23) (undo-tree-id2161 . -60) (undo-tree-id2162 . -60) (undo-tree-id2163 . -60) (undo-tree-id2164 . -60) (undo-tree-id2165 . -60) (undo-tree-id2166 . -60) (undo-tree-id2167 . -60) (undo-tree-id2168 . -60) (undo-tree-id2169 . -60) (undo-tree-id2170 . -60) (undo-tree-id2171 . -60) (undo-tree-id2172 . -60) (undo-tree-id2173 . -60) (undo-tree-id2174 . -60) (undo-tree-id2175 . -60) (undo-tree-id2176 . -60) (undo-tree-id2177 . -60) (undo-tree-id2178 . -60) (undo-tree-id2179 . -60) (undo-tree-id2180 . -60) (undo-tree-id2181 . -60) (undo-tree-id2182 . -60) (undo-tree-id2183 . -60) (undo-tree-id2184 . -60) (undo-tree-id2185 . -60) (undo-tree-id2186 . -60) (undo-tree-id2187 . -60) (undo-tree-id2188 . -60) (undo-tree-id2189 . -117) (undo-tree-id2190 . -117) (undo-tree-id2191 . -117) (undo-tree-id2192 . -117) (undo-tree-id2193 . -117) (undo-tree-id2194 . -117) (undo-tree-id2195 . -117) (undo-tree-id2196 . -117) (undo-tree-id2197 . -117) (undo-tree-id2198 . -117) (undo-tree-id2199 . -117) (undo-tree-id2200 . -117) (undo-tree-id2201 . -117) (undo-tree-id2202 . -117) (undo-tree-id2203 . -117) (undo-tree-id2204 . -117) (undo-tree-id2205 . -117) (undo-tree-id2206 . -117) (undo-tree-id2207 . -117) (undo-tree-id2208 . -117) (undo-tree-id2209 . -117) (undo-tree-id2210 . -118) (undo-tree-id2211 . -118) (undo-tree-id2212 . -118) (undo-tree-id2213 . -118) (undo-tree-id2214 . -117) (undo-tree-id2215 . -118) (undo-tree-id2216 . -118) (undo-tree-id2217 . -118) (undo-tree-id2218 . -118) (undo-tree-id2219 . -118) (undo-tree-id2220 . -118) (undo-tree-id2221 . -152) 412) nil (26052 28486 14238 279000) 0 nil])
([nil nil ((313 . 318) (312 . 313) (303 . 312) (302 . 304) (298 . 302) (293 . 298) 293) nil (26052 28486 14189 303000) 0 nil])
([nil nil ((311 . 312) (#("0" 0 1 (fontified t)) . 311) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1)) nil (26052 28486 14187 915000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -321) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (#("l" 0 1 (fontified t)) . -322) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) 323 (321 . 323) (320 . 321) (317 . 320)) nil (26052 28486 14175 883000) 0 nil])
([nil nil ((397 . 398) (#("\\" 0 1 (fontified t)) . -397) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -398) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) 399 (397 . 399) (396 . 398) (#("'" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -396) (396 . 397) (395 . 397) (390 . 395) (387 . 390) (#(")" 0 1 (fontified nil)) . -386) (386 . 387) (#(")" 0 1 (fontified nil)) . -386) (386 . 387) (382 . 386) (381 . 382) (375 . 381) (374 . 375) (369 . 374) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -369) (undo-tree-id1875 . -1) (#(" " 0 1 (fontified t)) . -370) (undo-tree-id1876 . -1) (#("=" 0 1 (fontified t)) . -371) (undo-tree-id1877 . -1) (#(" " 0 1 (fontified t)) . -372) (undo-tree-id1878 . -1) 373 (368 . 373) (365 . 368) (364 . 366) (360 . 364) (#("p" 0 1 (fontified t)) . -360) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (#("r" 0 1 (fontified t)) . -361) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (#("i" 0 1 (fontified t)) . -362) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (#("n" 0 1 (fontified t)) . -363) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#("t" 0 1 (fontified t)) . -364) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) 365 (360 . 365) (347 . 360) (#(" " 0 1 (fontified t)) . -347) (undo-tree-id1894 . -1) 348 (347 . 348) (#(")" 0 1 (fontified nil)) . -346) (346 . 347) (#(")" 0 1 (fontified nil)) . -346) (346 . 347) (#(" " 0 1 (fontified t)) . -346) (undo-tree-id1895 . -1) (#("=" 0 1 (fontified t)) . -347) (undo-tree-id1896 . -1) (#("=" 0 1 (fontified t)) . -348) (undo-tree-id1897 . -1) (#(" " 0 1 (fontified t)) . -349) (undo-tree-id1898 . -1) (#("0" 0 1 (fontified t)) . -350) (undo-tree-id1899 . -1) 351 (343 . 351) (#("5" 0 1 (fontified t)) . -343) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) 344 (341 . 344) (340 . 342) (337 . 340) (329 . 337) (328 . 334) (327 . 329) (326 . 327) (#(")" 0 1 (fontified nil)) . -325) (325 . 326) (#(")" 0 1 (fontified nil)) . -325) (325 . 326) (322 . 325)) nil (26052 28486 14127 27000) 0 nil])
([nil nil ((401 . 410) (400 . 401)) nil (26052 28486 14059 940000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -402) (undo-tree-id1484 . -8) (undo-tree-id1485 . -8) (undo-tree-id1486 . -8) (undo-tree-id1487 . -8) (undo-tree-id1488 . -8) (undo-tree-id1489 . -8) (undo-tree-id1490 . -8) (undo-tree-id1491 . -8) (undo-tree-id1492 . -8) (undo-tree-id1493 . -8) (undo-tree-id1494 . -8) (undo-tree-id1495 . -8) (undo-tree-id1496 . -8) (undo-tree-id1497 . -8) (undo-tree-id1498 . -8) (undo-tree-id1499 . -8) (undo-tree-id1500 . -8) (undo-tree-id1501 . -8) (undo-tree-id1502 . -8) (undo-tree-id1503 . -8) (undo-tree-id1504 . -8) (undo-tree-id1505 . -8) (undo-tree-id1506 . -8) (undo-tree-id1507 . -8) (undo-tree-id1508 . -8) (undo-tree-id1509 . -8) (undo-tree-id1510 . -8) (undo-tree-id1511 . -8) (undo-tree-id1512 . -8) (undo-tree-id1513 . -8) (undo-tree-id1514 . -8) (undo-tree-id1515 . -8) (undo-tree-id1516 . -8) (undo-tree-id1517 . -8) (undo-tree-id1518 . -8) (undo-tree-id1519 . -8) (undo-tree-id1520 . -8) (undo-tree-id1521 . -8) (undo-tree-id1522 . -8) (undo-tree-id1523 . -8) (undo-tree-id1524 . -8) (undo-tree-id1525 . -8) (undo-tree-id1526 . -8) (undo-tree-id1527 . -8) (undo-tree-id1528 . -8) (undo-tree-id1529 . -8) (undo-tree-id1530 . -8) (undo-tree-id1531 . -8) (undo-tree-id1532 . -8) (undo-tree-id1533 . -8) (undo-tree-id1534 . -8) (undo-tree-id1535 . -8) (undo-tree-id1536 . -8) (undo-tree-id1537 . -8) (undo-tree-id1538 . -8) (undo-tree-id1539 . -8) (undo-tree-id1540 . -8) (undo-tree-id1541 . -8) (undo-tree-id1542 . -8) (undo-tree-id1543 . -8) (undo-tree-id1544 . -8) (undo-tree-id1545 . -8) (undo-tree-id1546 . -8) (undo-tree-id1547 . -8) (undo-tree-id1548 . -8) (undo-tree-id1549 . -8) (undo-tree-id1550 . -8) (undo-tree-id1551 . -8) (undo-tree-id1552 . -8) (undo-tree-id1553 . -8) (undo-tree-id1554 . -8) (undo-tree-id1555 . -8) (undo-tree-id1556 . -8) (undo-tree-id1557 . -8) (undo-tree-id1558 . -8) (undo-tree-id1559 . -8) (undo-tree-id1560 . -8) (undo-tree-id1561 . -8) (undo-tree-id1562 . -8) (undo-tree-id1563 . -8) (undo-tree-id1564 . -8) (undo-tree-id1565 . -8) (undo-tree-id1566 . -8) (undo-tree-id1567 . -8) (undo-tree-id1568 . -8) (undo-tree-id1569 . -8) (undo-tree-id1570 . -8) (undo-tree-id1571 . -8) (undo-tree-id1572 . -8) (undo-tree-id1573 . -8) (undo-tree-id1574 . -8) (undo-tree-id1575 . -8) (undo-tree-id1576 . -8) (undo-tree-id1577 . -8) (undo-tree-id1578 . -8) (undo-tree-id1579 . -8) (undo-tree-id1580 . -8) (undo-tree-id1581 . -8) (undo-tree-id1582 . -8) (undo-tree-id1583 . -8) (undo-tree-id1584 . -8) (undo-tree-id1585 . -8) (undo-tree-id1586 . -8) (undo-tree-id1587 . -8) (undo-tree-id1588 . -8) (undo-tree-id1589 . -8) (undo-tree-id1590 . -8) (undo-tree-id1591 . -8) (undo-tree-id1592 . -8) (undo-tree-id1593 . -8) (undo-tree-id1594 . -8) (undo-tree-id1595 . -8) (undo-tree-id1596 . -8) (undo-tree-id1597 . -8) (undo-tree-id1598 . -8) (undo-tree-id1599 . -8) (undo-tree-id1600 . -8) (undo-tree-id1601 . -8) (undo-tree-id1602 . -8) (undo-tree-id1603 . -8) (undo-tree-id1604 . -8) (undo-tree-id1605 . -8) (undo-tree-id1606 . -8) (undo-tree-id1607 . -8) (undo-tree-id1608 . -8) (undo-tree-id1609 . -8) (undo-tree-id1610 . -8) (undo-tree-id1611 . -8) (undo-tree-id1612 . -8) (undo-tree-id1613 . -8) (undo-tree-id1614 . -8) (undo-tree-id1615 . -8) (undo-tree-id1616 . -8) (undo-tree-id1617 . -8) (undo-tree-id1618 . -8) (undo-tree-id1619 . -8) (undo-tree-id1620 . -8) (undo-tree-id1621 . -8) (undo-tree-id1622 . -8) (undo-tree-id1623 . -8) (undo-tree-id1624 . -8) (undo-tree-id1625 . -8) (undo-tree-id1626 . -8) (undo-tree-id1627 . -8) (undo-tree-id1628 . -8) (undo-tree-id1629 . -8) (undo-tree-id1630 . -8) (undo-tree-id1631 . -8) (undo-tree-id1632 . -8) (undo-tree-id1633 . -8) (undo-tree-id1634 . -8) (undo-tree-id1635 . -7) (undo-tree-id1636 . -7) (undo-tree-id1637 . -7) (undo-tree-id1638 . -7) (undo-tree-id1639 . -7) (undo-tree-id1640 . -7) (undo-tree-id1641 . -7) (undo-tree-id1642 . -7) (undo-tree-id1643 . -7) (undo-tree-id1644 . -7) (undo-tree-id1645 . -7) (undo-tree-id1646 . -7) (undo-tree-id1647 . -7) (undo-tree-id1648 . -7) (undo-tree-id1649 . -7) (undo-tree-id1650 . -7) (undo-tree-id1651 . -7) (undo-tree-id1652 . -7) (undo-tree-id1653 . -7) (undo-tree-id1654 . -7) (undo-tree-id1655 . -7) (undo-tree-id1656 . -7) (undo-tree-id1657 . -7) (undo-tree-id1658 . -7) (undo-tree-id1659 . -7) (undo-tree-id1660 . -7) (undo-tree-id1661 . -7) (undo-tree-id1662 . -7) (undo-tree-id1663 . -7) (undo-tree-id1664 . -7) (undo-tree-id1665 . -7) (undo-tree-id1666 . -7) (undo-tree-id1667 . -7) (undo-tree-id1668 . -7) (undo-tree-id1669 . -7) (undo-tree-id1670 . -7) (undo-tree-id1671 . -7) (undo-tree-id1672 . -7) (undo-tree-id1673 . -7) (undo-tree-id1674 . -7) (undo-tree-id1675 . -7) (undo-tree-id1676 . -7) (undo-tree-id1677 . -7) (undo-tree-id1678 . -7) (undo-tree-id1679 . -8) (undo-tree-id1680 . -8) (undo-tree-id1681 . -8) (undo-tree-id1682 . -8) (undo-tree-id1683 . -8) (undo-tree-id1684 . -8) (undo-tree-id1685 . -8) (undo-tree-id1686 . -8) (undo-tree-id1687 . -8) (undo-tree-id1688 . -8) (undo-tree-id1689 . -8) (undo-tree-id1690 . -8) (undo-tree-id1691 . -8) (undo-tree-id1692 . -8) (undo-tree-id1693 . -8) (undo-tree-id1694 . -8) (undo-tree-id1695 . -8) (undo-tree-id1696 . -8) (undo-tree-id1697 . -8) (undo-tree-id1698 . -8) (undo-tree-id1699 . -8) (undo-tree-id1700 . -8) (undo-tree-id1701 . -8) (undo-tree-id1702 . -8) (undo-tree-id1703 . -8) (undo-tree-id1704 . -8) (undo-tree-id1705 . -8) (undo-tree-id1706 . -8) (undo-tree-id1707 . -8) (undo-tree-id1708 . -8) (undo-tree-id1709 . -8) (undo-tree-id1710 . -8) 410) nil (26052 28486 14055 517000) 0 nil])
([nil nil ((402 . 407)) nil (26052 28486 13974 78000) 0 nil])
([nil nil ((#("dfklj" 0 1 (fontified t) 1 2 (fontified t) 2 4 (fontified t) 4 5 (fontified t)) . 402) (undo-tree-id1378 . -1) (undo-tree-id1379 . -4) (undo-tree-id1380 . -4) (undo-tree-id1381 . -4) (undo-tree-id1382 . -4) (undo-tree-id1383 . -4) (undo-tree-id1384 . -4) (undo-tree-id1385 . -4) (undo-tree-id1386 . -4) (undo-tree-id1387 . -4) (undo-tree-id1388 . -4) (undo-tree-id1389 . -4) (undo-tree-id1390 . -4) (undo-tree-id1391 . -4) (undo-tree-id1392 . -4) (undo-tree-id1393 . -4) (undo-tree-id1394 . -5) (undo-tree-id1395 . -5) (undo-tree-id1396 . -5) (undo-tree-id1397 . -5) (undo-tree-id1398 . -5) (undo-tree-id1399 . -5) (undo-tree-id1400 . -5) (undo-tree-id1401 . -5) (undo-tree-id1402 . -5) (undo-tree-id1403 . -5) (undo-tree-id1404 . -5) (undo-tree-id1405 . -5) (undo-tree-id1406 . -5) (undo-tree-id1407 . -5) (undo-tree-id1408 . -5) (undo-tree-id1409 . -5) (undo-tree-id1410 . -5) (undo-tree-id1411 . -5) (undo-tree-id1412 . -5) (undo-tree-id1413 . -5) (undo-tree-id1414 . -5) (undo-tree-id1415 . -5) (undo-tree-id1416 . -5) (undo-tree-id1417 . -5) (undo-tree-id1418 . -5) (undo-tree-id1419 . -5) (undo-tree-id1420 . -5) (undo-tree-id1421 . -5) (undo-tree-id1422 . -5) (undo-tree-id1423 . -5) (undo-tree-id1424 . -5) (undo-tree-id1425 . -5) (undo-tree-id1426 . -5) (undo-tree-id1427 . -5) (undo-tree-id1428 . -5) (undo-tree-id1429 . -5) (undo-tree-id1430 . -5) (undo-tree-id1431 . -5) (undo-tree-id1432 . -5) (undo-tree-id1433 . -5) (undo-tree-id1434 . -5) (undo-tree-id1435 . -5) (undo-tree-id1436 . -5) (undo-tree-id1437 . -5) (undo-tree-id1438 . -5) (undo-tree-id1439 . -5) (undo-tree-id1440 . -5) (undo-tree-id1441 . -5) (undo-tree-id1442 . -5) (undo-tree-id1443 . -5) (undo-tree-id1444 . -5) (undo-tree-id1445 . -5) (undo-tree-id1446 . -5) (undo-tree-id1447 . -5) (undo-tree-id1448 . -5) (undo-tree-id1449 . -5) (undo-tree-id1450 . -5) (undo-tree-id1451 . -4) (undo-tree-id1452 . -4) (undo-tree-id1453 . -4) (undo-tree-id1454 . -4) (undo-tree-id1455 . -4) (undo-tree-id1456 . -4) (undo-tree-id1457 . -4) (undo-tree-id1458 . -4) (undo-tree-id1459 . -4) (undo-tree-id1460 . -4) (undo-tree-id1461 . -4) (undo-tree-id1462 . -4) (undo-tree-id1463 . -4) (undo-tree-id1464 . -4) (undo-tree-id1465 . -4) (undo-tree-id1466 . -4) (undo-tree-id1467 . -4) (undo-tree-id1468 . -4) (undo-tree-id1469 . -4) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) (undo-tree-id1473 . -4) (undo-tree-id1474 . -4) (undo-tree-id1475 . -4) (undo-tree-id1476 . -4) (undo-tree-id1477 . -1) (undo-tree-id1478 . -4) (undo-tree-id1479 . -4) (undo-tree-id1480 . -4) (undo-tree-id1481 . -4) (undo-tree-id1482 . -4) (undo-tree-id1483 . -4)) nil (26052 28486 13971 971000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -401) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) 348) nil (26052 28486 13935 861000) 0 nil])
([nil nil ((#(" x" 0 2 (fontified nil)) . -414) (414 . 416) (#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 414) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (410 . 414) 427 (414 . 427) (#(" x" 0 2 (fontified nil)) . -414) (414 . 416) (#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 414) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -4) (undo-tree-id938 . -4) (undo-tree-id939 . -4) (undo-tree-id940 . -4) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -4) (undo-tree-id946 . -4) (undo-tree-id947 . -4) (undo-tree-id948 . -4) (undo-tree-id949 . -4) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -4) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (undo-tree-id971 . -4) (undo-tree-id972 . -4) (undo-tree-id973 . -4) (undo-tree-id974 . -4) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (undo-tree-id979 . -4) (undo-tree-id980 . -4) (410 . 414) 414 (#(" " 0 1 (fontified t)) . -414) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) 415 (414 . 415) (#(" x" 0 2 (fontified nil)) . -414) (414 . 416) (#("else" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil)) . 414) (undo-tree-id1006 . -4) (undo-tree-id1007 . -4) (undo-tree-id1008 . -4) (undo-tree-id1009 . -4) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) (undo-tree-id1017 . -4) (undo-tree-id1018 . -4) (undo-tree-id1019 . -4) (undo-tree-id1020 . -4) (undo-tree-id1021 . -4) (undo-tree-id1022 . -4) (undo-tree-id1023 . -4) (undo-tree-id1024 . -4) (410 . 414) 414 (410 . 414) (401 . 410) 400) nil (26052 28486 13792 876000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . 414) (undo-tree-id819 . 12) (undo-tree-id820 . -12) (undo-tree-id821 . -12) (undo-tree-id822 . -12) (undo-tree-id823 . -12) (undo-tree-id824 . -12) (undo-tree-id825 . -12) (undo-tree-id826 . -12) (undo-tree-id827 . -12) (undo-tree-id828 . -12) (undo-tree-id829 . -12) (undo-tree-id830 . -12) (undo-tree-id831 . -12) (undo-tree-id832 . -12) (undo-tree-id833 . -12) (undo-tree-id834 . -12) (undo-tree-id835 . -12) (undo-tree-id836 . -12) (undo-tree-id837 . -12) (undo-tree-id838 . -12) (undo-tree-id839 . -12) (undo-tree-id840 . -12) (undo-tree-id841 . -12) (undo-tree-id842 . -12) (undo-tree-id843 . -12) (undo-tree-id844 . -12) (undo-tree-id845 . -12) (undo-tree-id846 . -12) (undo-tree-id847 . -12) (undo-tree-id848 . -12) (undo-tree-id849 . 12) (undo-tree-id850 . -11) (undo-tree-id851 . -11) (undo-tree-id852 . -11) (undo-tree-id853 . -11) (undo-tree-id854 . -11) (undo-tree-id855 . -11) (undo-tree-id856 . -11) (undo-tree-id857 . -11) (undo-tree-id858 . -11) (undo-tree-id859 . -11) (undo-tree-id860 . -11) (undo-tree-id861 . -11) (undo-tree-id862 . -11) (undo-tree-id863 . -11) (undo-tree-id864 . -11) (undo-tree-id865 . -11) (#("
" 0 1 (fontified t)) . -414) (undo-tree-id866 . 1) (undo-tree-id867 . 1) (undo-tree-id868 . -1) 413) nil (26052 28486 13734 614000) 0 nil])
([nil nil ((#(" x" 0 2 (fontified nil)) . -414) (414 . 416) (#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 414) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) (undo-tree-id408 . -4) (undo-tree-id409 . -4) (undo-tree-id410 . -4) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (410 . 414) 429 (#("p" 0 1 (fontified t)) . -429) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("u" 0 1 (fontified t)) . -430) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("t" 0 1 (fontified t)) . -431) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("c" 0 1 (fontified t)) . -432) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (#("h" 0 1 (fontified t)) . -433) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("a" 0 1 (fontified t)) . -434) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("r" 0 1 (fontified t)) . -435) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) 436 (429 . 436) (417 . 429) (416 . 426) (415 . 417) (414 . 415) (#(" x" 0 2 (fontified nil)) . -414) (414 . 416) (#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 414) (undo-tree-id717 . -3) (undo-tree-id718 . -4) (undo-tree-id719 . -4) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (410 . 414) 414) nil (26052 28486 13708 857000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . 416) (undo-tree-id200 . -12) (undo-tree-id201 . -12) (undo-tree-id202 . -12) (undo-tree-id203 . -12) (undo-tree-id204 . -12) (undo-tree-id205 . -12) (undo-tree-id206 . -12) (undo-tree-id207 . -12) (undo-tree-id208 . -12) (undo-tree-id209 . -12) (undo-tree-id210 . -12) (undo-tree-id211 . -12) (undo-tree-id212 . -12) (undo-tree-id213 . -12) (undo-tree-id214 . -12) (undo-tree-id215 . -12) (undo-tree-id216 . -12) (undo-tree-id217 . -12) (undo-tree-id218 . -12) (undo-tree-id219 . -12) (undo-tree-id220 . -12) (undo-tree-id221 . -12) (undo-tree-id222 . -12) (undo-tree-id223 . -12) (undo-tree-id224 . -12) (undo-tree-id225 . -12) (undo-tree-id226 . -12) (undo-tree-id227 . -12) (undo-tree-id228 . -12) (undo-tree-id229 . -12) (undo-tree-id230 . -12) (undo-tree-id231 . -12) (undo-tree-id232 . -12) (undo-tree-id233 . -12) (undo-tree-id234 . -12) (undo-tree-id235 . -12) (undo-tree-id236 . -12) (undo-tree-id237 . -12) (undo-tree-id238 . -12) (undo-tree-id239 . -12) (undo-tree-id240 . -12) (undo-tree-id241 . -12) (undo-tree-id242 . -12) (undo-tree-id243 . -12) (undo-tree-id244 . -12) (undo-tree-id245 . -12) (undo-tree-id246 . -12) (undo-tree-id247 . -12) (undo-tree-id248 . -12) (undo-tree-id249 . -12) (undo-tree-id250 . -12) (undo-tree-id251 . -12) (undo-tree-id252 . -12) (undo-tree-id253 . -12) (undo-tree-id254 . -12) (undo-tree-id255 . -12) (undo-tree-id256 . -12) (undo-tree-id257 . -12) (undo-tree-id258 . -12) (undo-tree-id259 . -12) (undo-tree-id260 . -12) (undo-tree-id261 . -12) (undo-tree-id262 . -12) (undo-tree-id263 . -12) (undo-tree-id264 . -12) (undo-tree-id265 . -12) (undo-tree-id266 . -12) (undo-tree-id267 . -12) (undo-tree-id268 . -12) (undo-tree-id269 . -12) (undo-tree-id270 . -12) (undo-tree-id271 . -12) (undo-tree-id272 . -12) (undo-tree-id273 . -12) (undo-tree-id274 . -12) (undo-tree-id275 . -12) (undo-tree-id276 . -12) (undo-tree-id277 . -12) (undo-tree-id278 . -12) (undo-tree-id279 . -12) (undo-tree-id280 . -12) (undo-tree-id281 . -12) (undo-tree-id282 . -12) (undo-tree-id283 . -12) (undo-tree-id284 . -12) (undo-tree-id285 . -12) (undo-tree-id286 . -12) (undo-tree-id287 . -12) (undo-tree-id288 . -12) (undo-tree-id289 . -12) (undo-tree-id290 . -12) (undo-tree-id291 . -12) (undo-tree-id292 . -12) (undo-tree-id293 . -12) (undo-tree-id294 . -12) (undo-tree-id295 . -12) (undo-tree-id296 . -12) (undo-tree-id297 . -12) (undo-tree-id298 . -12) (undo-tree-id299 . -12) (undo-tree-id300 . -12) (undo-tree-id301 . -12) (undo-tree-id302 . -12) (undo-tree-id303 . -12) (undo-tree-id304 . -12) (undo-tree-id305 . -12) (undo-tree-id306 . -12) (undo-tree-id307 . -12) (undo-tree-id308 . -12) (undo-tree-id309 . -12) (undo-tree-id310 . -12) (undo-tree-id311 . -12) (undo-tree-id312 . -12) (undo-tree-id313 . -12) (undo-tree-id314 . -12) (undo-tree-id315 . -12) (undo-tree-id316 . -11) (undo-tree-id317 . -11) (undo-tree-id318 . -11) (undo-tree-id319 . -11) (undo-tree-id320 . -11) (undo-tree-id321 . -11) (undo-tree-id322 . -11) (undo-tree-id323 . -11) (undo-tree-id324 . -11) (undo-tree-id325 . -11) (undo-tree-id326 . -11) (undo-tree-id327 . -11) (undo-tree-id328 . -11) (undo-tree-id329 . -11) (undo-tree-id330 . -11) (undo-tree-id331 . -11) (undo-tree-id332 . -11) (undo-tree-id333 . -11) (undo-tree-id334 . -11) (undo-tree-id335 . -11) (undo-tree-id336 . -11) (undo-tree-id337 . -11) (undo-tree-id338 . -11) (undo-tree-id339 . -11) (undo-tree-id340 . -11) (undo-tree-id341 . -11) (undo-tree-id342 . -11) (undo-tree-id343 . -11) (undo-tree-id344 . -11) (undo-tree-id345 . -11) (undo-tree-id346 . -12) (#("
" 0 1 (fontified t)) . -416) (undo-tree-id347 . -1) 415) nil (26052 28486 13528 895000) 0 nil])
([nil nil ((nil rear-nonsticky nil 441 . 442) (nil fontified nil 429 . 442) (429 . 442) (416 . 429) 415) nil (26052 28486 13460 684000) 0 nil])
([nil nil ((nil rear-nonsticky nil 454 . 455) (#("
" 0 1 (fontified nil)) . -468) (442 . 469) 441) nil (26052 28486 13459 723000) 0 nil])
([nil nil ((455 . 459) (442 . 455) 429) nil (26052 28486 13458 471000) 0 nil])
([nil nil ((#("            for 
" 0 12 (fontified t) 12 13 (face font-lock-keyword-face fontified t) 13 14 (face font-lock-keyword-face fontified t) 14 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 17 (fontified t)) . 443) (undo-tree-id18 . 1) (undo-tree-id19 . -16) (undo-tree-id20 . -14) (undo-tree-id21 . -12) (undo-tree-id22 . -12) (undo-tree-id23 . -12) (undo-tree-id24 . -12) (undo-tree-id25 . -12) (undo-tree-id26 . -12) (undo-tree-id27 . -12) (undo-tree-id28 . -12) (undo-tree-id29 . -12) (undo-tree-id30 . -12) (undo-tree-id31 . -12) (undo-tree-id32 . -12) (undo-tree-id33 . -12) (undo-tree-id34 . -12) (undo-tree-id35 . -12) (undo-tree-id36 . -12) (undo-tree-id37 . -13) (undo-tree-id38 . -13) (undo-tree-id39 . -13) (undo-tree-id40 . -13) (undo-tree-id41 . -13) (undo-tree-id42 . -13) (undo-tree-id43 . -13) (undo-tree-id44 . -13) (undo-tree-id45 . -13) (undo-tree-id46 . -13) (undo-tree-id47 . -13) (undo-tree-id48 . -13) (undo-tree-id49 . -13) (undo-tree-id50 . -13) (undo-tree-id51 . -13) (undo-tree-id52 . -13) (undo-tree-id53 . -13) (undo-tree-id54 . -13) (undo-tree-id55 . -13) (undo-tree-id56 . -13) (undo-tree-id57 . -13) (undo-tree-id58 . -13) (undo-tree-id59 . -13) (undo-tree-id60 . -13) (undo-tree-id61 . -13) (undo-tree-id62 . -13) (undo-tree-id63 . -13) (undo-tree-id64 . -13) (undo-tree-id65 . -13) (undo-tree-id66 . -13) (undo-tree-id67 . -13) (undo-tree-id68 . -13) (undo-tree-id69 . -13) (undo-tree-id70 . -13) (undo-tree-id71 . -13) (undo-tree-id72 . -13) (undo-tree-id73 . -13) (undo-tree-id74 . -13) (undo-tree-id75 . -13) (undo-tree-id76 . -13) (undo-tree-id77 . -13) (undo-tree-id78 . -13) (undo-tree-id79 . -13) (undo-tree-id80 . -13) (undo-tree-id81 . -13) (undo-tree-id82 . -13) (undo-tree-id83 . -13) (undo-tree-id84 . -13) (undo-tree-id85 . -13) (undo-tree-id86 . -13) (undo-tree-id87 . -13) (undo-tree-id88 . -13) (undo-tree-id89 . -14) (undo-tree-id90 . -14) (undo-tree-id91 . -14) (undo-tree-id92 . -14) (undo-tree-id93 . -14) (undo-tree-id94 . -14) (undo-tree-id95 . -14) (undo-tree-id96 . -14) (undo-tree-id97 . -14) (undo-tree-id98 . -14) (undo-tree-id99 . -14) (undo-tree-id100 . -14) (undo-tree-id101 . -14) (undo-tree-id102 . -14) (undo-tree-id103 . -14) (undo-tree-id104 . -14) (undo-tree-id105 . -14) (undo-tree-id106 . -14) (undo-tree-id107 . -14) (undo-tree-id108 . -14) (undo-tree-id109 . -14) (undo-tree-id110 . -14) (undo-tree-id111 . -14) (undo-tree-id112 . -15) (undo-tree-id113 . -15) (undo-tree-id114 . -15) (undo-tree-id115 . -15) (undo-tree-id116 . -15) (undo-tree-id117 . -15) (undo-tree-id118 . -15) (undo-tree-id119 . -15) (undo-tree-id120 . -15) (undo-tree-id121 . -15) (undo-tree-id122 . -15) (undo-tree-id123 . -15) (undo-tree-id124 . -15) (undo-tree-id125 . -15) (undo-tree-id126 . -15) (undo-tree-id127 . -15) (undo-tree-id128 . -16) (undo-tree-id129 . -16) (undo-tree-id130 . -16) (undo-tree-id131 . -16) (undo-tree-id132 . -16) (undo-tree-id133 . -16) (undo-tree-id134 . -16) (undo-tree-id135 . -16) (undo-tree-id136 . -16) (undo-tree-id137 . -16) (undo-tree-id138 . -16) (undo-tree-id139 . -16) (undo-tree-id140 . -16) (undo-tree-id141 . -16) (undo-tree-id142 . -16) (undo-tree-id143 . -16) (undo-tree-id144 . -16) (undo-tree-id145 . -16) (undo-tree-id146 . -16) (undo-tree-id147 . -16) (undo-tree-id148 . -16) (undo-tree-id149 . -16) (undo-tree-id150 . -16) (undo-tree-id151 . -16) (undo-tree-id152 . -16) (undo-tree-id153 . -16) (undo-tree-id154 . -16) (undo-tree-id155 . -16) (undo-tree-id156 . -16) (undo-tree-id157 . -16) (undo-tree-id158 . -16) (undo-tree-id159 . -16) (undo-tree-id160 . -16) (undo-tree-id161 . -16) (undo-tree-id162 . -16) (undo-tree-id163 . -16) (undo-tree-id164 . -15) (undo-tree-id165 . -15) (undo-tree-id166 . -15) (undo-tree-id167 . -15) (undo-tree-id168 . -15) (undo-tree-id169 . -15) (undo-tree-id170 . -15) (undo-tree-id171 . -15) (undo-tree-id172 . -15) (undo-tree-id173 . -15) (undo-tree-id174 . -15) (undo-tree-id175 . -15) (undo-tree-id176 . -15) (undo-tree-id177 . -15) (undo-tree-id178 . -15) (undo-tree-id179 . -15) (undo-tree-id180 . -15) (undo-tree-id181 . -15) (undo-tree-id182 . -15) (undo-tree-id183 . -15) (undo-tree-id184 . -15) (undo-tree-id185 . -15) (undo-tree-id186 . -15) (undo-tree-id187 . -15) (undo-tree-id188 . -15) (undo-tree-id189 . -15) (undo-tree-id190 . -15) (undo-tree-id191 . -15) (undo-tree-id192 . -15) (undo-tree-id193 . -14) (undo-tree-id194 . -15) (undo-tree-id195 . -15) (undo-tree-id196 . -15) (undo-tree-id197 . -15) (undo-tree-id198 . -15) (undo-tree-id199 . -17) 458) nil (26052 28486 13454 598000) 0 nil])
([nil nil ((478 . 479) (#(")" 0 1 (fontified nil)) . -477) (477 . 478) (#(")" 0 1 (face font-lock-string-face fontified nil)) . -477) (477 . 478) (#("'" 0 1 (fontified nil)) . -476) (476 . 477) (#("'" 0 1 (face font-lock-string-face fontified nil)) . -476) (475 . 477) (474 . 476) (#("'" 0 1 (fontified nil)) . -474) (473 . 475) (472 . 473) (469 . 472) (468 . 469) (467 . 468) (#("\"" 0 1 (fontified nil)) . -466) (466 . 467) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -466) (465 . 467) (464 . 465) (463 . 464) (462 . 464) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -462) (462 . 463) (461 . 463) (455 . 461) (442 . 455) 432) nil (26052 28486 13347 337000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -541) (515 . 542) 514) nil (26052 28486 13345 194000) 0 nil])
([nil nil ((537 . 539) (#("*" 0 1 (face font-lock-string-face fontified t)) . 537) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1)) nil (26052 28486 13343 977000) 0 nil])
([nil nil ((#("            " 0 11 (fontified nil) 11 12 (fontified nil rear-nonsticky t)) . -524) (undo-tree-id0 . -12) (undo-tree-id1 . -12) (undo-tree-id2 . -12) (undo-tree-id3 . -12) (undo-tree-id4 . -12) (undo-tree-id5 . -12) (undo-tree-id6 . -12) (undo-tree-id7 . -12) (undo-tree-id8 . -12) (undo-tree-id9 . -12) (undo-tree-id10 . -12) (undo-tree-id11 . -12) (undo-tree-id12 . -12) (undo-tree-id13 . -12) (undo-tree-id14 . -12) (516 . 524) 538) nil (26052 28486 13339 69000) 0 nil])
([nil nil ((#("#include <stdio.h>

int main(void) {
    int n; scanf(\"%d\", &n);

    for (int i = 1; i <= n; i++) {
        if (i % 2)
            for (int j = 0; j < n; j++) putchar('*');
        else {
            putchar('*');
            printf(\"%*c\", n-2, ' ');
            putchar('*');
        }
        putchar('\\n');
    }
}
" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 8 (face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (c-in-sws t fontified t) 9 10 (category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t fontified t) 10 17 (face font-lock-string-face c-in-sws t fontified t) 17 18 (category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t fontified t) 18 19 (c-in-sws t fontified t) 19 20 (c-is-sws t fontified t) 20 21 (face font-lock-type-face fontified t c-is-sws t) 21 22 (face font-lock-type-face fontified t) 22 23 (face font-lock-type-face c-type c-decl-id-start fontified t) 23 24 (fontified t) 24 28 (face font-lock-function-name-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 29 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 41 (fontified t) 41 43 (face font-lock-type-face fontified t) 43 44 (face font-lock-type-face c-type c-decl-id-start fontified t) 44 45 (fontified t) 45 46 (face font-lock-variable-name-face fontified t) 46 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 58 (face font-lock-string-face fontified t) 58 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 65 (fontified t) 65 66 (fontified t) 66 70 (fontified t) 70 71 (face font-lock-keyword-face fontified t) 71 72 (face font-lock-keyword-face fontified t) 72 73 (face font-lock-keyword-face fontified t) 73 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 76 (face font-lock-type-face fontified t) 76 77 (face font-lock-type-face fontified t) 77 78 (face font-lock-type-face c-type c-decl-id-start fontified t) 78 79 (fontified t) 79 80 (face font-lock-variable-name-face fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t) 86 87 (fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 98 (face (rainbow-delimiters-depth-2-face) fontified t) 98 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-2-face) fontified t) 100 101 (fontified t) 101 109 (fontified t) 109 110 (face font-lock-keyword-face fontified t) 110 111 (face font-lock-keyword-face fontified t) 111 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-3-face) fontified t) 113 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-3-face) fontified t) 119 120 (fontified t) 120 132 (fontified t) 132 133 (face font-lock-keyword-face fontified t) 133 134 (face font-lock-keyword-face fontified t) 134 135 (face font-lock-keyword-face fontified t) 135 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-3-face) fontified t) 137 138 (face font-lock-type-face fontified t) 138 139 (face font-lock-type-face fontified t) 139 140 (face font-lock-type-face c-type c-decl-id-start fontified t) 140 141 (fontified t) 141 142 (face font-lock-variable-name-face fontified t) 142 143 (fontified t) 143 144 (fontified t) 144 145 (fontified t) 145 146 (fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 149 (fontified t) 149 150 (fontified t) 150 151 (fontified t) 151 152 (fontified t) 152 153 (fontified t) 153 154 (fontified t) 154 155 (fontified t) 155 156 (fontified t) 156 157 (fontified t) 157 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-3-face) fontified t) 159 160 (fontified t) 160 161 (fontified t) 161 162 (fontified t) 162 163 (fontified t) 163 164 (fontified t) 164 165 (fontified t) 165 166 (fontified t) 166 167 (fontified t) 167 168 (face (rainbow-delimiters-depth-3-face) fontified t) 168 169 (face font-lock-string-face fontified t) 169 170 (face font-lock-string-face fontified t) 170 171 (face font-lock-string-face fontified t) 171 172 (face (rainbow-delimiters-depth-3-face) fontified t) 172 173 (fontified t) 173 174 (fontified t) 174 182 (fontified t) 182 186 (face font-lock-keyword-face fontified t) 186 187 (fontified t) 187 188 (face (rainbow-delimiters-depth-3-face) fontified t) 188 189 (fontified t) 189 201 (fontified t) 201 208 (fontified t) 208 209 (face (rainbow-delimiters-depth-4-face) fontified t) 209 212 (face font-lock-string-face fontified t) 212 213 (face (rainbow-delimiters-depth-4-face) fontified t) 213 214 (rear-nonsticky t fontified t) 214 215 (fontified t) 215 227 (fontified t) 227 228 (fontified t) 228 229 (fontified t) 229 230 (fontified t) 230 231 (fontified t) 231 232 (fontified t) 232 233 (fontified t) 233 234 (face (rainbow-delimiters-depth-4-face) fontified t) 234 235 (face font-lock-string-face fontified t) 235 236 (face font-lock-string-face fontified t) 236 237 (face font-lock-string-face fontified t) 237 238 (face font-lock-string-face fontified t) 238 239 (face font-lock-string-face fontified t) 239 240 (fontified t) 240 241 (fontified t) 241 242 (fontified t) 242 243 (fontified t) 243 244 (fontified t) 244 245 (fontified t) 245 246 (fontified t) 246 247 (face font-lock-string-face fontified t) 247 248 (face font-lock-string-face fontified t) 248 249 (face font-lock-string-face fontified t) 249 250 (face (rainbow-delimiters-depth-4-face) fontified t) 250 251 (fontified t) 251 252 (fontified t) 252 263 (fontified t) 263 264 (fontified t rear-nonsticky t) 264 271 (fontified t) 271 272 (face (rainbow-delimiters-depth-4-face) fontified t) 272 275 (face font-lock-string-face fontified t) 275 276 (face (rainbow-delimiters-depth-4-face) fontified t) 276 277 (fontified t rear-nonsticky t) 277 278 (fontified t) 278 286 (fontified t) 286 287 (face (rainbow-delimiters-depth-3-face) fontified t) 287 288 (fontified t) 288 296 (fontified t) 296 303 (fontified t) 303 304 (face (rainbow-delimiters-depth-3-face) fontified t) 304 305 (face font-lock-string-face fontified t) 305 306 (face font-lock-string-face fontified t) 306 307 (face font-lock-string-face fontified t) 307 308 (face font-lock-string-face fontified t) 308 309 (face (rainbow-delimiters-depth-3-face) fontified t) 309 310 (fontified t rear-nonsticky t) 310 311 (fontified t) 311 315 (fontified t) 315 316 (face (rainbow-delimiters-depth-2-face) fontified t) 316 317 (fontified t) 317 318 (face (rainbow-delimiters-depth-1-face) fontified t) 318 319 (fontified t)) . 228) (undo-tree-id2288 . -18) (undo-tree-id2289 . 12) (undo-tree-id2290 . -318) (undo-tree-id2291 . -317) (undo-tree-id2292 . -317) (undo-tree-id2293 . 2) (undo-tree-id2294 . -317) (undo-tree-id2295 . -317) (undo-tree-id2296 . -317) (undo-tree-id2297 . -201) (undo-tree-id2298 . -201) (undo-tree-id2299 . -319) (undo-tree-id2300 . -319) (undo-tree-id2301 . -101) (t 26052 28486 35452 303000)) nil (26052 28624 131201 334000) 0 nil])
([nil nil ((#("*/
" 0 1 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 1 2 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 2 3 (c-in-sws t rear-nonsticky t fontified t)) . 225) (undo-tree-id2269 . -3) (undo-tree-id2270 . -3) (undo-tree-id2271 . -2) (undo-tree-id2272 . -3) (undo-tree-id2273 . -3) (undo-tree-id2274 . -3) (undo-tree-id2275 . -3) (undo-tree-id2276 . -3) (undo-tree-id2277 . -3) (undo-tree-id2278 . -3) (undo-tree-id2279 . -3) (undo-tree-id2280 . -3) (undo-tree-id2281 . -3) (undo-tree-id2282 . -3) (undo-tree-id2283 . -3) (undo-tree-id2284 . -3) (undo-tree-id2285 . -3) (undo-tree-id2286 . -3) (undo-tree-id2287 . -3)) nil (26052 28624 131196 754000) 0 nil])
([nil nil ((#("
" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -224) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) 225) nil (26052 28624 131189 412000) 0 nil])
([nil nil ((#("
" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -223) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) 224) nil (26052 28624 131182 432000) 0 nil])
([nil nil ((#("/*
" 0 1 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1 2 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 2 3 (c-in-sws t face font-lock-comment-face fontified t)) . 1) (undo-tree-id2223 . -2)) nil (26052 28624 131169 934000) 0 nil])
([nil nil ((220 . 221) 21) nil (26052 28624 131158 704000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 197) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (t 26052 28624 151429 780000)) nil (26052 28661 613737 663000) 0 nil])
([nil nil ((210 . 212)) nil (26052 28661 613724 767000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 146) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (t 26052 28661 633056 998000)) nil (26052 28677 469709 290000) 0 nil])
([nil nil ((#("#include <stdio.h>

int main(void) {
    int n; scanf(\"%d\", &n);

    int lines = n / 2;
    for (int i = 1; i <= lines; i++)
        printf(\"%*c%*c\\n\", i, '*', 2*(lines-i)+1, '*');

    printf(\"%*c\\n\", lines+1, '*');
}
" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 8 (face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (c-in-sws t fontified t) 9 10 (face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t fontified t category c-<-as-paren-syntax) 10 17 (face font-lock-string-face c-in-sws t fontified t) 17 18 (face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t fontified t category c->-as-paren-syntax) 18 19 (c-in-sws t fontified t) 19 20 (c-is-sws t fontified t) 20 21 (face font-lock-type-face fontified t c-is-sws t) 21 22 (face font-lock-type-face fontified t) 22 23 (face font-lock-type-face c-type c-decl-id-start fontified t) 23 24 (fontified t) 24 28 (face font-lock-function-name-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 29 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 41 (fontified t) 41 43 (face font-lock-type-face fontified t) 43 44 (face font-lock-type-face c-type c-decl-id-start fontified t) 44 45 (fontified t) 45 46 (face font-lock-variable-name-face fontified t) 46 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 58 (face font-lock-string-face fontified t) 58 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 70 (fontified t) 70 72 (face font-lock-type-face fontified t) 72 73 (face font-lock-type-face c-type c-decl-id-start fontified t) 73 74 (fontified t) 74 79 (face font-lock-variable-name-face fontified t) 79 93 (fontified t) 93 96 (face font-lock-keyword-face fontified t) 96 97 (fontified t) 97 98 (face (rainbow-delimiters-depth-2-face) fontified t) 98 100 (face font-lock-type-face fontified t) 100 101 (face font-lock-type-face c-type c-decl-id-start fontified t) 101 102 (fontified t) 102 103 (face font-lock-variable-name-face fontified t) 103 124 (fontified t) 124 125 (face (rainbow-delimiters-depth-2-face) fontified t) 125 126 (fontified t) 126 140 (fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t) 141 145 (face font-lock-string-face fontified t) 145 151 (face font-lock-string-face fontified t) 151 156 (fontified t) 156 159 (face font-lock-string-face fontified t) 159 163 (fontified t) 163 164 (face (rainbow-delimiters-depth-3-face) fontified t) 164 171 (fontified t) 171 172 (face (rainbow-delimiters-depth-3-face) fontified t) 172 176 (fontified t) 176 179 (face font-lock-string-face fontified t) 179 180 (face (rainbow-delimiters-depth-2-face) fontified t) 180 182 (fontified t) 182 183 (fontified t) 183 193 (fontified t) 193 194 (face (rainbow-delimiters-depth-2-face) fontified t) 194 195 (face font-lock-string-face fontified t) 195 201 (face font-lock-string-face fontified t) 201 208 (fontified t) 208 209 (fontified t) 209 210 (fontified t) 210 212 (fontified t) 212 215 (face font-lock-string-face fontified t) 215 216 (face (rainbow-delimiters-depth-2-face) fontified t) 216 218 (fontified t) 218 219 (face (rainbow-delimiters-depth-1-face) fontified t) 219 220 (fontified t)) . 1) (undo-tree-id2564 . -18) (undo-tree-id2565 . 10) (undo-tree-id2566 . -20) (undo-tree-id2567 . -1) (undo-tree-id2568 . -219) (undo-tree-id2569 . -219) (undo-tree-id2570 . -20) (undo-tree-id2571 . -219) (undo-tree-id2572 . -219) (undo-tree-id2573 . -219) (undo-tree-id2574 . -219) (undo-tree-id2575 . -219) (undo-tree-id2576 . -219) (undo-tree-id2577 . -218) (undo-tree-id2578 . -173) (undo-tree-id2579 . -173) (undo-tree-id2580 . -173) (undo-tree-id2581 . -20) (undo-tree-id2582 . -20) (t 26052 28677 487079 187000)) nil (26052 32434 50397 353000) 0 nil])
([nil nil ((1 . 221)) nil (26052 32434 50391 767000) 0 nil])
([nil nil ((#("    int lines = n / 2;
    for (int i = 1; i <= lines; i++)
        printf(\"%*c%*c\\n\", i, '*', 2*(lines-i)+1, '*');

    printf(\"%*c\\n\", lines+1, '*');
" 0 4 (fontified t) 4 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face c-type c-decl-id-start fontified t) 7 8 (fontified t) 8 13 (face font-lock-variable-name-face fontified t) 13 27 (fontified t) 27 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 34 (face font-lock-type-face fontified t) 34 35 (face font-lock-type-face c-type c-decl-id-start fontified t) 35 36 (fontified t) 36 37 (face font-lock-variable-name-face fontified t) 37 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t) 59 60 (fontified t) 60 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 79 (face font-lock-string-face fontified t) 79 85 (face font-lock-string-face fontified t) 85 90 (fontified t) 90 93 (face font-lock-string-face fontified t) 93 97 (fontified t) 97 98 (face (rainbow-delimiters-depth-3-face) fontified t) 98 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-3-face) fontified t) 106 110 (fontified t) 110 113 (face font-lock-string-face fontified t) 113 114 (face (rainbow-delimiters-depth-2-face) fontified t) 114 116 (fontified t) 116 117 (fontified t) 117 127 (fontified t) 127 128 (face (rainbow-delimiters-depth-2-face) fontified t) 128 129 (face font-lock-string-face fontified t) 129 135 (face font-lock-string-face fontified t) 135 142 (fontified t) 142 143 (fontified t) 143 144 (fontified t) 144 146 (fontified t) 146 149 (face font-lock-string-face fontified t) 149 150 (face (rainbow-delimiters-depth-2-face) fontified t) 150 152 (fontified t)) . 67) (undo-tree-id2555 . 8) (undo-tree-id2556 . -117) (undo-tree-id2557 . -151) (undo-tree-id2558 . -117) (undo-tree-id2559 . -152) (undo-tree-id2560 . -107) (undo-tree-id2561 . -107) (undo-tree-id2562 . -107) (undo-tree-id2563 . -117) 184 (t 26052 28677 487079 187000)) nil (26052 32434 50391 270000) 0 nil])
([nil nil ((#("    int n; scanf(\"%d\", &n);
" 0 4 (fontified t) 4 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face c-type c-decl-id-start fontified t) 7 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 21 (face font-lock-string-face fontified t) 21 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 28 (fontified t)) . 38) (undo-tree-id2537 . -28) (undo-tree-id2538 . -27) (undo-tree-id2539 . -28) (undo-tree-id2540 . -28) (undo-tree-id2541 . -28) (undo-tree-id2542 . -28) (undo-tree-id2543 . -28) (undo-tree-id2544 . -28) (undo-tree-id2545 . -28) (undo-tree-id2546 . -28) (undo-tree-id2547 . -28) (undo-tree-id2548 . -28) (undo-tree-id2549 . -28) (undo-tree-id2550 . -28) (undo-tree-id2551 . -28) (undo-tree-id2552 . -28) (undo-tree-id2553 . -28) (undo-tree-id2554 . -28)) nil (26052 32434 50388 298000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 38) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1)) nil (26052 32434 50383 233000) 0 nil])
([nil nil ((62 . 67) (61 . 62) (56 . 61) (51 . 56) (50 . 51) (42 . 50) (37 . 42) 21) nil (26052 32434 50380 504000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 58) (#("
" 0 1 (fontified t)) . -58) (51 . 52) (#("    " 0 4 (fontified nil)) . 51) (#("
" 0 1 (fontified t)) . -51) 41) nil (26052 32434 50379 478000) 0 nil])
([nil nil ((72 . 78) (71 . 72) (63 . 71) (58 . 63) 57) nil (26052 32434 50378 723000) 0 nil])
([nil nil ((115 . 116) (#(")" 0 1 (fontified nil)) . -114) (114 . 115) (#(")" 0 1 (fontified nil)) . -114) (114 . 115) (112 . 114) (111 . 112) (#("\"" 0 1 (fontified nil)) . -110) (110 . 111) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -110) (105 . 111) (104 . 105) (96 . 104) (#("e" 0 1 (face font-lock-string-face fontified t)) . -96) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -97) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -98) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -99) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -100) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) 101 (99 . 101) (92 . 99) (91 . 93) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -91) (91 . 92) (90 . 92) (84 . 90) (79 . 84) (78 . 79)) nil (26052 32434 50376 901000) 0 nil])
([nil nil ((nil rear-nonsticky nil 120 . 121) (#("
" 0 1 (fontified nil)) . -153) (116 . 154) 115) nil (26052 32434 50370 272000) 0 nil])
([nil nil ((129 . 136) (#("Double" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t)) . 129) (undo-tree-id2512 . -5) (undo-tree-id2513 . -4) 133) nil (26052 32434 50369 675000) 0 nil])
([nil nil ((145 . 146) (#("f" 0 1 (face font-lock-string-face fontified t)) . 145)) nil (26052 32434 50368 266000) 0 nil])
([nil nil ((151 . 152) (#("d" 0 1 (fontified t)) . 151)) nil (26052 32434 50367 830000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -59) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (#("o" 0 1 (fontified t)) . -60) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) 61 (59 . 61) (54 . 59) (53 . 54) (42 . 53) (38 . 42) (38 . 39) (#("    double d; int b;
    d = 3.14; b = 1;
    printf(\"Double value: %f\\n\", d);
    printf(\"Boolean value: %d\\n\", b);
" 0 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face c-type c-decl-id-start fontified t) 10 11 (fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (face font-lock-type-face fontified t) 15 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified t) 17 18 (fontified t) 18 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 46 (fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (face font-lock-string-face fontified t) 64 65 (face font-lock-string-face fontified t) 65 66 (face font-lock-string-face fontified t) 66 67 (face font-lock-string-face fontified t) 67 68 (face font-lock-string-face fontified t) 68 69 (face font-lock-string-face fontified t) 69 70 (face font-lock-string-face fontified t) 70 71 (face font-lock-string-face fontified t) 71 72 (face font-lock-string-face fontified t) 72 73 (face font-lock-string-face fontified t) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-2-face) fontified t) 77 78 (fontified t) 78 79 (fontified t) 79 82 (fontified t) 82 83 (rear-nonsticky t fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t) 86 87 (fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 90 (face (rainbow-delimiters-depth-2-face) fontified t) 90 91 (face font-lock-string-face fontified t) 91 92 (face font-lock-string-face fontified t) 92 93 (face font-lock-string-face fontified t) 93 94 (face font-lock-string-face fontified t) 94 95 (face font-lock-string-face fontified t) 95 96 (face font-lock-string-face fontified t) 96 97 (face font-lock-string-face fontified t) 97 98 (face font-lock-string-face fontified t) 98 99 (face font-lock-string-face fontified t) 99 100 (face font-lock-string-face fontified t) 100 101 (face font-lock-string-face fontified t) 101 102 (face font-lock-string-face fontified t) 102 103 (face font-lock-string-face fontified t) 103 104 (face font-lock-string-face fontified t) 104 105 (face font-lock-string-face fontified t) 105 106 (face font-lock-string-face fontified t) 106 107 (face font-lock-string-face fontified t) 107 108 (face font-lock-string-face fontified t) 108 109 (face font-lock-string-face fontified t) 109 110 (face font-lock-string-face fontified t) 110 111 (face font-lock-string-face fontified t) 111 112 (fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-2-face) fontified t) 115 116 (fontified t) 116 117 (fontified t)) . 38) (undo-tree-id2483 . 19) (undo-tree-id2484 . -116) (undo-tree-id2485 . -117) (undo-tree-id2486 . -117) (undo-tree-id2487 . -117) (undo-tree-id2488 . -117) (undo-tree-id2489 . -117) (undo-tree-id2490 . -117) (undo-tree-id2491 . -117) (undo-tree-id2492 . -117) (undo-tree-id2493 . -117) (undo-tree-id2494 . -117) (undo-tree-id2495 . -117) (undo-tree-id2496 . -117) (undo-tree-id2497 . -117) (undo-tree-id2498 . -117) (undo-tree-id2499 . -117) (undo-tree-id2500 . -117) (undo-tree-id2501 . -113) (undo-tree-id2502 . -117) (undo-tree-id2503 . -117) (undo-tree-id2504 . -117) (undo-tree-id2505 . -117) (undo-tree-id2506 . -117) (undo-tree-id2507 . -117) (undo-tree-id2508 . -113) (undo-tree-id2509 . -113) (undo-tree-id2510 . -113) (undo-tree-id2511 . -83) 121) nil (26052 32434 50366 432000) 0 nil])
([nil nil ((nil rear-nonsticky nil 58 . 59) (#("
" 0 1 (fontified nil)) . -71) (54 . 72) 41) nil (26052 32434 50355 128000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 71) (undo-tree-id2475 . -4) (undo-tree-id2476 . -4) (#("
" 0 1 (fontified t)) . -71) 59) nil (26052 32434 50354 447000) 0 nil])
([nil nil (70) nil (26052 32434 50353 356000) 0 nil])
([nil nil ((59 . 64)) nil (26052 32434 50352 941000) 0 nil])
([nil nil ((75 . 76)) nil (26052 32434 50352 635000) 0 nil])
([nil nil ((217 . 218) (#(")" 0 1 (fontified nil)) . -216) (216 . 217) (#(")" 0 1 (fontified nil)) . -216) (216 . 217) (213 . 216) (212 . 213) (#("\"" 0 1 (fontified nil)) . -211) (211 . 212) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -211) (207 . 212) (#("d" 0 1 (face font-lock-string-face fontified t)) . -207) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) 208 (205 . 208) (204 . 205) (196 . 204) (#("L" 0 1 (face font-lock-string-face fontified t)) . -196) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) 197 (196 . 197) (195 . 197) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -195) (195 . 196) (194 . 196) (188 . 194) (183 . 188) (182 . 183) (172 . 182) (167 . 172) (166 . 167) (152 . 166) (147 . 152) (146 . 147) (134 . 146) (129 . 134) (128 . 129) (125 . 128) (#("3" 0 1 (fontified t)) . -125) (undo-tree-id2474 . -1) 126 (116 . 126) (111 . 116) (110 . 111) (102 . 110) (97 . 102) (96 . 97) (82 . 96) (77 . 82) 75) nil (26052 32434 50351 48000) 0 nil])
([nil nil ((nil rear-nonsticky nil 222 . 223) (#("
" 0 1 (fontified nil)) . -323) (218 . 324) 217) nil (26052 32434 50345 946000) 0 nil])
([nil nil ((232 . 236) (231 . 232)) nil (26052 32434 50345 366000) 0 nil])
([nil nil ((276 . 282) (#("int" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 276) (undo-tree-id2466 . -2) (undo-tree-id2467 . -1) 277) nil (26052 32434 50344 933000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . 280)) nil (26052 32434 50343 869000) 0 nil])
([nil nil ((nil rear-nonsticky nil 281 . 282) (nil fontified nil 281 . 282) (281 . 282) 280) nil (26052 32434 50343 442000) 0 nil])
([nil nil ((309 . 314) (#("long" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t)) . 309) (undo-tree-id2464 . -3) (undo-tree-id2465 . -3) 312) nil (26052 32434 50342 853000) 0 nil])
([nil nil ((#("int" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 315) (undo-tree-id2463 . -2)) nil (26052 32434 50341 815000) 0 nil])
([nil nil ((204 . 210) (244 . 245) (282 . 285) (314 . 323) (#(" " 0 1 (face font-lock-string-face fontified t)) . 314) (undo-tree-id2459 . 1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1)) nil (26052 32434 50340 699000) 0 nil])
([nil nil ((262 . 263)) nil (26052 32434 50328 558000) 0 nil])
([nil nil ((303 . 304) (#("l" 0 1 (fontified t)) . 303)) nil (26052 32434 50328 212000) 0 nil])
([nil nil ((344 . 345) (#("l" 0 1 (fontified t)) . 344)) nil (26052 32434 50327 858000) 0 nil])
([nil nil ((254 . 255)) nil (26052 32434 50327 497000) 0 nil])
([nil nil ((297 . 298) (#("l" 0 1 (face font-lock-string-face fontified t)) . 297)) nil (26052 32434 50327 86000) 0 nil])
([nil nil ((338 . 339) (#("l" 0 1 (face font-lock-string-face fontified t)) . 338)) nil (26052 32434 50326 417000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -38) (undo-tree-id2448 . -4) 42 (38 . 42) (38 . 39) (#("    long int ld;
    long long int ldd;
    long double Ld;
    short hd;
    ld = 2147484;
    ldd = 922337;
    Ld = 1.1E+4932;
    hd = 32767;
    printf(\"long int      : %ld\\n\", ld);
    printf(\"long long int : %lld\\n\", lld);
    printf(\"long double   : %Ld\\n\", Ld);
    printf(\"short         : %hd\\n\", hd);
" 0 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified t) 12 13 (fontified t) 13 14 (face font-lock-variable-name-face fontified t) 14 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 20 (fontified t) 20 21 (rear-nonsticky t fontified t) 21 22 (face font-lock-type-face fontified t) 22 23 (face font-lock-type-face fontified t) 23 24 (face font-lock-type-face fontified t) 24 25 (face font-lock-type-face fontified t) 25 26 (fontified t) 26 27 (face font-lock-type-face fontified t) 27 28 (face font-lock-type-face fontified t) 28 29 (face font-lock-type-face fontified t) 29 30 (face font-lock-type-face fontified t) 30 31 (fontified t) 31 32 (face font-lock-type-face fontified t) 32 33 (face font-lock-type-face fontified t) 33 34 (face font-lock-type-face c-type c-decl-id-start fontified t) 34 35 (fontified t) 35 36 (face font-lock-variable-name-face fontified t) 36 37 (face font-lock-variable-name-face fontified t) 37 38 (face font-lock-variable-name-face fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 44 (fontified t) 44 45 (face font-lock-type-face fontified t) 45 46 (face font-lock-type-face fontified t) 46 47 (face font-lock-type-face fontified t) 47 48 (face font-lock-type-face fontified t) 48 49 (fontified t) 49 50 (face font-lock-type-face fontified t) 50 51 (face font-lock-type-face fontified t) 51 52 (face font-lock-type-face fontified t) 52 53 (face font-lock-type-face fontified t) 53 54 (face font-lock-type-face fontified t) 54 55 (face font-lock-type-face c-type c-decl-id-start fontified t) 55 56 (fontified t) 56 57 (face font-lock-variable-name-face fontified t) 57 58 (face font-lock-variable-name-face fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 64 (fontified t) 64 65 (face font-lock-type-face fontified t) 65 66 (face font-lock-type-face fontified t) 66 67 (face font-lock-type-face fontified t) 67 68 (face font-lock-type-face fontified t) 68 69 (face font-lock-type-face c-type c-decl-id-start fontified t) 69 70 (fontified t) 70 71 (face font-lock-variable-name-face fontified t) 71 72 (face font-lock-variable-name-face fontified t) 72 73 (fontified t) 73 74 (fontified t) 74 78 (fontified t) 78 79 (fontified t) 79 80 (fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t) 86 87 (fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 103 (fontified t) 103 104 (fontified t) 104 105 (fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 119 (fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 127 (fontified t) 127 128 (fontified t) 128 129 (fontified t) 129 130 (fontified t) 130 134 (fontified t) 134 135 (fontified t) 135 136 (fontified t) 136 137 (fontified t) 137 138 (fontified t) 138 139 (fontified t) 139 140 (fontified t) 140 141 (fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 144 (fontified t) 144 145 (fontified t) 145 146 (fontified t) 146 150 (fontified t) 150 151 (fontified t) 151 152 (fontified t) 152 153 (fontified t) 153 154 (fontified t) 154 155 (fontified t) 155 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-2-face) fontified t) 157 158 (face font-lock-string-face fontified t) 158 159 (face font-lock-string-face fontified t) 159 160 (face font-lock-string-face fontified t) 160 161 (face font-lock-string-face fontified t) 161 162 (face font-lock-string-face fontified t) 162 163 (face font-lock-string-face fontified t) 163 164 (face font-lock-string-face fontified t) 164 165 (face font-lock-string-face fontified t) 165 166 (face font-lock-string-face fontified t) 166 172 (face font-lock-string-face fontified t) 172 173 (face font-lock-string-face fontified t) 173 174 (face font-lock-string-face fontified t) 174 175 (face font-lock-string-face fontified t) 175 176 (face font-lock-string-face fontified t) 176 177 (face font-lock-string-face fontified t) 177 178 (face font-lock-string-face fontified t) 178 179 (face font-lock-string-face fontified t) 179 180 (face font-lock-string-face fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 185 (face (rainbow-delimiters-depth-2-face) fontified t) 185 186 (fontified t) 186 187 (fontified t) 187 190 (fontified t) 190 191 (rear-nonsticky t fontified t) 191 192 (fontified t) 192 193 (fontified t) 193 194 (fontified t) 194 195 (fontified t) 195 196 (fontified t) 196 197 (fontified t) 197 198 (face (rainbow-delimiters-depth-2-face) fontified t) 198 199 (face font-lock-string-face fontified t) 199 200 (face font-lock-string-face fontified t) 200 201 (face font-lock-string-face fontified t) 201 202 (face font-lock-string-face fontified t) 202 203 (face font-lock-string-face fontified t) 203 204 (face font-lock-string-face fontified t) 204 205 (face font-lock-string-face fontified t) 205 206 (face font-lock-string-face fontified t) 206 207 (face font-lock-string-face fontified t) 207 208 (face font-lock-string-face fontified t) 208 209 (face font-lock-string-face fontified t) 209 210 (face font-lock-string-face fontified t) 210 211 (face font-lock-string-face fontified t) 211 212 (face font-lock-string-face fontified t) 212 213 (face font-lock-string-face fontified t) 213 214 (face font-lock-string-face fontified t) 214 215 (face font-lock-string-face fontified t) 215 216 (face font-lock-string-face fontified t) 216 217 (face font-lock-string-face fontified t) 217 218 (face font-lock-string-face fontified t) 218 219 (face font-lock-string-face fontified t) 219 220 (face font-lock-string-face fontified t) 220 221 (face font-lock-string-face fontified t) 221 222 (face font-lock-string-face fontified t) 222 223 (fontified t) 223 224 (fontified t) 224 225 (fontified t) 225 226 (fontified t) 226 227 (fontified t) 227 228 (face (rainbow-delimiters-depth-2-face) fontified t) 228 229 (fontified t) 229 230 (fontified t) 230 234 (fontified t) 234 235 (fontified t) 235 236 (fontified t) 236 237 (fontified t) 237 238 (fontified t) 238 239 (fontified t) 239 240 (fontified t) 240 241 (face (rainbow-delimiters-depth-2-face) fontified t) 241 242 (face font-lock-string-face fontified t) 242 243 (face font-lock-string-face fontified t) 243 244 (face font-lock-string-face fontified t) 244 245 (face font-lock-string-face fontified t) 245 246 (face font-lock-string-face fontified t) 246 247 (face font-lock-string-face fontified t) 247 248 (face font-lock-string-face fontified t) 248 249 (face font-lock-string-face fontified t) 249 250 (face font-lock-string-face fontified t) 250 251 (face font-lock-string-face fontified t) 251 252 (face font-lock-string-face fontified t) 252 253 (face font-lock-string-face fontified t rear-nonsticky t) 253 256 (face font-lock-string-face fontified t) 256 257 (face font-lock-string-face fontified t) 257 258 (face font-lock-string-face fontified t) 258 259 (face font-lock-string-face fontified t) 259 260 (face font-lock-string-face fontified t) 260 261 (face font-lock-string-face fontified t) 261 262 (face font-lock-string-face fontified t) 262 263 (face font-lock-string-face fontified t) 263 264 (face font-lock-string-face fontified t) 264 265 (fontified t) 265 266 (fontified t) 266 267 (fontified t) 267 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-2-face) fontified t) 269 270 (fontified t) 270 271 (fontified t) 271 275 (fontified t) 275 276 (fontified t) 276 277 (fontified t) 277 278 (fontified t) 278 279 (fontified t) 279 280 (fontified t) 280 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-2-face) fontified t) 282 283 (face font-lock-string-face fontified t) 283 284 (face font-lock-string-face fontified t) 284 285 (face font-lock-string-face fontified t) 285 286 (face font-lock-string-face fontified t) 286 287 (face font-lock-string-face fontified t) 287 297 (face font-lock-string-face fontified t) 297 298 (face font-lock-string-face fontified t) 298 299 (face font-lock-string-face fontified t) 299 300 (face font-lock-string-face fontified t) 300 301 (face font-lock-string-face fontified t) 301 302 (face font-lock-string-face fontified t) 302 303 (face font-lock-string-face fontified t) 303 304 (face font-lock-string-face fontified t) 304 305 (face font-lock-string-face fontified t) 305 306 (fontified t) 306 307 (fontified t) 307 308 (fontified t) 308 309 (fontified t) 309 310 (face (rainbow-delimiters-depth-2-face) fontified t) 310 311 (fontified t) 311 312 (fontified t)) . 38) (undo-tree-id2449 . 95) (undo-tree-id2450 . -311) (undo-tree-id2451 . -146) (undo-tree-id2452 . -288) (undo-tree-id2453 . -164) (undo-tree-id2454 . -271) (undo-tree-id2455 . -288) (undo-tree-id2456 . -271) (undo-tree-id2457 . -271) (undo-tree-id2458 . -275) 313) nil (26052 32434 50325 424000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -62) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) 63 (62 . 63) (57 . 62) (38 . 42) (52 . 53) (46 . 52) (38 . 46) (#("unsi" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -38) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) 42 (38 . 42)) nil (26052 32434 50321 195000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 57) (undo-tree-id2440 . -4) (undo-tree-id2441 . -4) (#("
" 0 1 (fontified t)) . -57) 41) nil (26052 32434 50318 462000) 0 nil])
([nil nil ((nil rear-nonsticky nil 61 . 62) (#("
" 0 1 (fontified nil)) . -77) (57 . 78) 56) nil (26052 32434 50316 611000) 0 nil])
([nil nil ((71 . 76)) nil (26052 32434 50316 81000) 0 nil])
([nil nil ((80 . 81)) nil (26052 32434 50315 748000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-variable-name-face fontified t)) . 80)) nil (26052 32434 50315 368000) 0 nil])
([nil nil ((#("long " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (fontified t)) . 71)) nil (26052 32434 50315 27000) 0 nil])
([nil nil ((#("
    unsigned int u;
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (rear-nonsticky nil fontified nil) 5 12 (face font-lock-type-face fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 15 (face font-lock-type-face fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified nil) 17 18 (fontified nil) 18 19 (face font-lock-variable-name-face fontified nil) 19 20 (fontified nil) 20 21 (fontified nil)) . 57) (undo-tree-id2436 . 3) (undo-tree-id2437 . -1) (undo-tree-id2438 . -20) (undo-tree-id2439 . -14) (77 . 78) (nil rear-nonsticky t 61 . 62)) nil (26052 32434 50314 400000) 0 nil])
([nil nil ((57 . 58) (57 . 61)) nil (26052 32434 50312 811000) 0 nil])
([nil nil ((#("unsi" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 38) (undo-tree-id2416 . -4) (undo-tree-id2417 . -4) (undo-tree-id2418 . -4) (38 . 42) (#("unsigned" 0 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil)) . 38) (undo-tree-id2419 . -8) (undo-tree-id2420 . -8) (undo-tree-id2421 . -8) (undo-tree-id2422 . -8) (#(" int u" 0 1 (fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-variable-name-face fontified nil)) . 46) (undo-tree-id2423 . -6) (undo-tree-id2424 . -6) (undo-tree-id2425 . -6) (undo-tree-id2426 . -6) (#(";" 0 1 (fontified nil)) . 52) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (#("    " 0 4 (fontified nil)) . 38) (undo-tree-id2431 . -3) (#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 57) (undo-tree-id2432 . -5) (undo-tree-id2433 . -5) (#("u" 0 1 (fontified nil)) . 62) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (62 . 63)) nil (26052 32434 50311 731000) 0 nil])
([nil nil ((38 . 350) (#("
" 0 1 (fontified nil)) . 38) (undo-tree-id2414 . 1) (#("    " 0 4 (fontified nil)) . 38) (undo-tree-id2415 . -4) (38 . 42)) nil (26052 32434 50305 176000) 0 nil])
([nil nil (42) nil (26052 32434 50304 71000) 0 nil])
([nil nil ((42 . 51)) nil (26052 32434 50303 809000) 0 nil])
([nil nil ((38 . 64) 50) nil (26052 32434 50303 438000) 0 nil])
([nil nil ((#("long " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (fontified t)) . 51) (undo-tree-id2413 . -4)) nil (26052 32434 50302 996000) 0 nil])
([nil nil ((56 . 57) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 56)) nil (26052 32434 50302 383000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-variable-name-face fontified t)) . 55)) nil (26052 32434 50302 30000) 0 nil])
([nil nil ((81 . 82) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 81)) nil (26052 32434 50301 670000) 0 nil])
([nil nil (104) nil (26052 32434 50301 234000) 0 nil])
([nil nil ((92 . 97) (#("d" 0 1 (fontified t)) . -92) (undo-tree-id2412 . -1) 93 (88 . 93)) nil (26052 32434 50300 889000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 113) (114 . 115) 113 (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 112) (113 . 114) 112) nil (26052 32434 50299 841000) 0 nil])
([nil nil (148) nil (26052 32434 50299 156000) 0 nil])
([nil nil ((140 . 149)) nil (26052 32434 50298 797000) 0 nil])
([nil nil ((#("    long double Ld;
" 0 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face c-type c-decl-id-start fontified t) 15 16 (fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (fontified t) 19 20 (fontified t)) . 116) (undo-tree-id2410 . -19) (undo-tree-id2411 . -12) 128) nil (26052 32434 50298 380000) 0 nil])
([nil nil ((136 . 137) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 136)) nil (26052 32434 50297 410000) 0 nil])
([nil nil ((143 . 144) (#("ld" 0 1 (fontified t) 1 2 (fontified t)) . 143) (undo-tree-id2409 . -1)) nil (26052 32434 50296 684000) 0 nil])
([nil nil ((149 . 150) (147 . 149) (#("2147484;" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 147) (undo-tree-id2408 . -7)) nil (26052 32434 50296 17000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 156)) nil (26052 32434 50295 247000) 0 nil])
([nil nil ((156 . 157) (#("d" 0 1 (fontified t)) . 156)) nil (26052 32434 50294 856000) 0 nil])
([nil nil ((165 . 166) (160 . 165) (#("922337;" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 160) (undo-tree-id2407 . -6)) nil (26052 32434 50294 391000) 0 nil])
([nil nil ((171 . 174) (#("Ld" 0 1 (fontified t) 1 2 (fontified t)) . 171) (undo-tree-id2405 . 2) (undo-tree-id2406 . -1)) nil (26052 32434 50293 663000) 0 nil])
([nil nil ((184 . 185) (177 . 184) (#("1.1E+4932;" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . 177) (undo-tree-id2404 . -9)) nil (26052 32434 50292 656000) 0 nil])
([nil nil ((191 . 192) (#("d" 0 1 (fontified t)) . 191)) nil (26052 32434 50291 777000) 0 nil])
([nil nil ((196 . 197) (195 . 196) (#("32767;" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 195) (undo-tree-id2403 . -5)) nil (26052 32434 50291 277000) 0 nil])
([nil nil ((#("short        " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 13 (face font-lock-string-face fontified t)) . 296) (undo-tree-id2398 . -12) (undo-tree-id2399 . -12) (undo-tree-id2400 . -12) (undo-tree-id2401 . -5) (undo-tree-id2402 . -12) (#("long double  " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t) 10 11 (face font-lock-string-face fontified t rear-nonsticky t) 11 13 (face font-lock-string-face fontified t)) . 268) (#("long long int" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t) 10 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face fontified t) 12 13 (face font-lock-string-face fontified t)) . 238) (#("long int     " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 13 (face font-lock-string-face fontified t)) . 210) 347) nil (26052 32434 50290 104000) 0 nil])
([nil nil ((nil rear-nonsticky nil 202 . 203) (334 . 349) (291 . 306) (246 . 261) (203 . 218) 202) nil (26052 32434 50287 794000) 0 nil])
([nil nil ((nil rear-nonsticky nil 203 . 204) (380 . 395) (322 . 337) (262 . 277) (204 . 219) 203) nil (26052 32434 50287 185000) 0 nil])
([nil nil ((nil rear-nonsticky nil 204 . 205) (426 . 441) (353 . 368) (278 . 293) (205 . 220) 204) nil (26052 32434 50286 485000) 0 nil])
([nil nil ((nil rear-nonsticky nil 205 . 206) (472 . 487) (384 . 399) (294 . 309) (206 . 221) 205) nil (26052 32434 50285 808000) 0 nil])
([nil nil ((#("unsigned int u;" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified nil) 12 13 (fontified nil) 13 14 (face font-lock-variable-name-face fontified nil) 14 15 (fontified nil)) . 206) (#("unsigned long i" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 15 (fontified nil)) . 294) (#("unsigned long l" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 15 (fontified nil)) . 384) (#("unsigned short " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil)) . 472) (undo-tree-id2397 . -14) (nil rear-nonsticky t 205 . 206)) nil (26052 32434 50284 903000) 0 nil])
([nil nil ((#("unsigned int u;" 0 1 (rear-nonsticky nil fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified nil) 12 13 (fontified nil) 13 14 (face font-lock-variable-name-face fontified nil) 14 15 (fontified nil)) . 205) (#("unsigned long i" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 278) (#("unsigned long l" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 353) (#("unsigned short " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (fontified t)) . 426) (undo-tree-id2396 . -1) (nil rear-nonsticky t 204 . 205)) nil (26052 32434 50283 887000) 0 nil])
([nil nil ((#("unsigned int u;" 0 1 (rear-nonsticky nil fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified nil) 12 13 (fontified nil) 13 14 (face font-lock-variable-name-face fontified nil) 14 15 (fontified nil)) . 204) (undo-tree-id2394 . -1) (#("unsigned long i" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 262) (#("unsigned long l" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 322) (#("unsigned short " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (fontified t)) . 380) (undo-tree-id2395 . -1) (nil rear-nonsticky t 203 . 204)) nil (26052 32434 50282 851000) 0 nil])
([nil nil ((#("unsigned int u;" 0 1 (rear-nonsticky nil fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified nil) 12 13 (fontified nil) 13 14 (face font-lock-variable-name-face fontified nil) 14 15 (fontified nil)) . 203) (undo-tree-id2392 . -1) (#("unsigned long i" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face c-type c-decl-id-start fontified t) 13 14 (fontified t) 14 15 (face font-lock-function-name-face fontified t)) . 246) (#("unsigned long l" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face c-type c-decl-id-start fontified t) 13 14 (fontified t) 14 15 (face font-lock-function-name-face fontified t)) . 291) (#("unsigned short " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face c-type c-decl-id-start fontified t) 14 15 (fontified t)) . 334) (undo-tree-id2393 . -1) (nil rear-nonsticky t 202 . 203)) nil (26052 32434 50281 435000) 0 nil])
([nil nil ((nil rear-nonsticky nil 209 . 210) (341 . 356) (298 . 313) (253 . 268) (210 . 225) 209) nil (26052 32434 50280 137000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . 223)) nil (26052 32434 50279 429000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t)) . 266)) nil (26052 32434 50279 116000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-string-face fontified t)) . 310)) nil (26052 32434 50278 708000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 353)) nil (26052 32434 50278 271000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-string-face fontified t)) . 223)) nil (26052 32434 50277 819000) 0 nil])
([nil nil ((223 . 224)) nil (26052 32434 50277 499000) 0 nil])
([nil nil ((266 . 269)) nil (26052 32434 50277 165000) 0 nil])
([nil nil ((313 . 321)) nil (26052 32434 50276 794000) 0 nil])
([nil nil ((222 . 233) (#("   " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 222) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -3) (undo-tree-id2386 . 3) (269 . 275) (#(" " 0 1 (face font-lock-string-face fontified t)) . 269) (undo-tree-id2387 . -1) (undo-tree-id2388 . 1) (363 . 372) (#(" " 0 1 (face font-lock-string-face fontified t)) . 363) (undo-tree-id2389 . 1) (undo-tree-id2390 . -1) (undo-tree-id2391 . 1)) nil (26052 32434 50275 981000) 0 nil])
([nil nil ((243 . 244) (#("ld" 0 1 (fontified t) 1 2 (fontified t)) . 243) (undo-tree-id2380 . -1) (undo-tree-id2381 . -2) (undo-tree-id2382 . -2)) nil (26052 32434 50272 520000) 0 nil])
([nil nil ((293 . 295) (#("lld" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 293) (undo-tree-id2377 . -2) (undo-tree-id2378 . -3) (undo-tree-id2379 . -3)) nil (26052 32434 50271 34000) 0 nil])
([nil nil ((343 . 346) (#("Ld" 0 1 (fontified t) 1 2 (fontified t)) . 343) (undo-tree-id2328 . -1) (undo-tree-id2329 . -2) (undo-tree-id2330 . -2) (undo-tree-id2331 . -2) (undo-tree-id2332 . -2) (undo-tree-id2333 . -2) (undo-tree-id2334 . -2) (undo-tree-id2335 . -2) (undo-tree-id2336 . -2) (undo-tree-id2337 . -2) (undo-tree-id2338 . -2) (undo-tree-id2339 . -2) (undo-tree-id2340 . -2) (undo-tree-id2341 . -2) (undo-tree-id2342 . -2) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -2) (undo-tree-id2376 . -2) 344) nil (26052 32434 50267 954000) 0 nil])
([nil nil ((395 . 396) (#("d" 0 1 (fontified t)) . 395) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1)) nil (26052 32434 50224 60000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-string-face fontified t)) . 236) (t 26052 32434 72679 614000)) nil (26052 32448 163547 292000) 0 nil])
([nil nil ((236 . 237) (#("d" 0 1 (face font-lock-string-face fontified t)) . 236)) nil (26052 32448 163546 594000) 0 nil])
([nil nil ((284 . 286) (#("lld" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 284) (undo-tree-id2601 . -2)) nil (26052 32448 163545 868000) 0 nil])
([nil nil ((334 . 337) (#("Ld" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 334) (undo-tree-id2598 . -1) (undo-tree-id2599 . -2) (undo-tree-id2600 . -2)) nil (26052 32448 163544 48000) 0 nil])
([nil nil ((387 . 388) (#("d" 0 1 (face font-lock-string-face fontified t)) . 387) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1)) nil (26052 32448 163539 622000) 0 nil])
([nil nil ((100 . 101) (#(")" 0 1 (fontified nil)) . -99) (99 . 100) (#(")" 0 1 (fontified nil)) . -99) (99 . 100) (96 . 99) (95 . 96) (#("\"" 0 1 (fontified nil)) . -94) (94 . 95) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -94) (89 . 95) (88 . 89) (86 . 88) (77 . 86) (76 . 78) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -76) (76 . 77) (75 . 77) (69 . 75) (64 . 69) (63 . 64) (42 . 63) (38 . 42) (38 . 39) (#("    unsigned int u;
    unsigned long int lu;
    unsigned long long int llu;
    unsigned short hu;
    u = 42;
    lu = 42943;
    llu = 1844674;
    hu = 0;
    printf(\"unsigned int           : %u\\n\", u);
    printf(\"unsigned long int      : %lu\\n\", lu);
    printf(\"unsigned long long int : %llu\\n\", llu);
    printf(\"unsigned short         : %hu\\n\", hu);
" 0 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face fontified t) 15 16 (face font-lock-type-face c-type c-decl-id-start fontified t) 16 17 (fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 24 (fontified t) 24 25 (face font-lock-type-face fontified t) 25 26 (face font-lock-type-face fontified t) 26 27 (face font-lock-type-face fontified t) 27 28 (face font-lock-type-face fontified t) 28 29 (face font-lock-type-face fontified t) 29 30 (face font-lock-type-face fontified t) 30 31 (face font-lock-type-face fontified t) 31 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 34 (face font-lock-type-face fontified t) 34 35 (face font-lock-type-face fontified t) 35 36 (face font-lock-type-face fontified t) 36 37 (face font-lock-type-face fontified t) 37 38 (fontified t) 38 39 (face font-lock-type-face fontified t) 39 40 (face font-lock-type-face fontified t) 40 41 (face font-lock-type-face c-type c-decl-id-start fontified t) 41 42 (fontified t) 42 43 (face font-lock-variable-name-face fontified t) 43 44 (face font-lock-variable-name-face fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 49 (fontified t) 49 50 (fontified t rear-nonsticky t) 50 51 (face font-lock-type-face fontified t) 51 52 (face font-lock-type-face fontified t) 52 53 (face font-lock-type-face fontified t) 53 54 (face font-lock-type-face fontified t) 54 55 (face font-lock-type-face fontified t) 55 56 (face font-lock-type-face fontified t) 56 57 (face font-lock-type-face fontified t) 57 58 (face font-lock-type-face fontified t) 58 59 (fontified t) 59 60 (face font-lock-type-face fontified t) 60 61 (face font-lock-type-face fontified t) 61 62 (face font-lock-type-face fontified t) 62 63 (face font-lock-type-face fontified t) 63 64 (fontified t) 64 65 (face font-lock-type-face fontified t) 65 66 (face font-lock-type-face fontified t) 66 67 (face font-lock-type-face fontified t) 67 68 (face font-lock-type-face fontified t) 68 69 (fontified t) 69 70 (face font-lock-type-face fontified t) 70 71 (face font-lock-type-face fontified t) 71 72 (face font-lock-type-face c-type c-decl-id-start fontified t) 72 73 (fontified t) 73 74 (face font-lock-variable-name-face fontified t) 74 75 (face font-lock-variable-name-face fontified t) 75 76 (face font-lock-variable-name-face fontified t) 76 77 (fontified t) 77 78 (fontified t) 78 82 (fontified t) 82 83 (face font-lock-type-face fontified t) 83 84 (face font-lock-type-face fontified t) 84 85 (face font-lock-type-face fontified t) 85 86 (face font-lock-type-face fontified t) 86 87 (face font-lock-type-face fontified t) 87 88 (face font-lock-type-face fontified t) 88 89 (face font-lock-type-face fontified t) 89 90 (face font-lock-type-face fontified t) 90 91 (fontified t) 91 92 (face font-lock-type-face fontified t) 92 93 (face font-lock-type-face fontified t) 93 94 (face font-lock-type-face fontified t) 94 95 (face font-lock-type-face fontified t) 95 96 (face font-lock-type-face c-type c-decl-id-start fontified t) 96 97 (fontified t) 97 98 (face font-lock-variable-name-face fontified t) 98 99 (face font-lock-variable-name-face fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 105 (fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t) 113 117 (fontified t) 117 118 (fontified t) 118 119 (fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 127 (fontified t) 127 128 (fontified t) 128 129 (fontified t) 129 133 (fontified t) 133 134 (fontified t) 134 135 (fontified t) 135 136 (fontified t) 136 137 (fontified t) 137 138 (fontified t) 138 139 (fontified t) 139 140 (fontified t) 140 141 (fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 144 (fontified t) 144 145 (fontified t) 145 146 (fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 152 (fontified t) 152 153 (fontified t) 153 154 (fontified t) 154 155 (fontified t) 155 156 (fontified t) 156 157 (fontified t) 157 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 164 (fontified t) 164 165 (rear-nonsticky nil fontified t) 165 166 (fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 169 (fontified t) 169 170 (fontified t) 170 171 (face (rainbow-delimiters-depth-2-face) fontified t) 171 172 (face font-lock-string-face rear-nonsticky t fontified t) 172 173 (face font-lock-string-face fontified t) 173 174 (face font-lock-string-face fontified t) 174 175 (face font-lock-string-face fontified t) 175 176 (face font-lock-string-face fontified t) 176 177 (face font-lock-string-face fontified t) 177 178 (face font-lock-string-face fontified t) 178 179 (face font-lock-string-face fontified t) 179 180 (face font-lock-string-face fontified t) 180 181 (face font-lock-string-face fontified t) 181 182 (face font-lock-string-face fontified t) 182 183 (face font-lock-string-face fontified t) 183 195 (face font-lock-string-face fontified t) 195 196 (face font-lock-string-face fontified t) 196 197 (face font-lock-string-face fontified t) 197 198 (face font-lock-string-face fontified t) 198 199 (face font-lock-string-face fontified t) 199 200 (face font-lock-string-face fontified t) 200 201 (face font-lock-string-face fontified t) 201 202 (face font-lock-string-face fontified t) 202 203 (fontified t) 203 204 (fontified t) 204 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-2-face) fontified t) 206 207 (fontified t) 207 208 (fontified t) 208 211 (fontified t) 211 212 (fontified t rear-nonsticky t) 212 213 (fontified t) 213 214 (fontified t) 214 215 (fontified t) 215 216 (fontified t) 216 217 (fontified t) 217 218 (fontified t) 218 219 (face (rainbow-delimiters-depth-2-face) fontified t) 219 220 (face font-lock-string-face fontified t) 220 221 (face font-lock-string-face fontified t) 221 222 (face font-lock-string-face fontified t) 222 223 (face font-lock-string-face fontified t) 223 224 (face font-lock-string-face fontified t) 224 225 (face font-lock-string-face fontified t) 225 226 (face font-lock-string-face fontified t) 226 227 (face font-lock-string-face fontified t) 227 228 (face font-lock-string-face fontified t) 228 229 (face font-lock-string-face fontified t) 229 230 (face font-lock-string-face fontified t) 230 231 (face font-lock-string-face fontified t) 231 232 (face font-lock-string-face fontified t) 232 233 (face font-lock-string-face fontified t) 233 234 (face font-lock-string-face fontified t) 234 235 (face font-lock-string-face fontified t) 235 236 (face font-lock-string-face fontified t) 236 243 (face font-lock-string-face fontified t) 243 244 (face font-lock-string-face fontified t) 244 245 (face font-lock-string-face fontified t) 245 246 (face font-lock-string-face fontified t) 246 247 (face font-lock-string-face fontified t) 247 248 (face font-lock-string-face fontified t) 248 249 (face font-lock-string-face fontified t) 249 250 (face font-lock-string-face fontified t) 250 251 (face font-lock-string-face fontified t) 251 252 (fontified t) 252 253 (fontified t) 253 254 (fontified t) 254 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-2-face) fontified t) 256 257 (fontified t) 257 258 (fontified t) 258 262 (fontified t) 262 263 (fontified t) 263 264 (fontified t) 264 265 (fontified t) 265 266 (fontified t) 266 267 (fontified t) 267 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-2-face) fontified t) 269 270 (face font-lock-string-face fontified t) 270 271 (face font-lock-string-face fontified t) 271 272 (face font-lock-string-face fontified t) 272 273 (face font-lock-string-face fontified t) 273 274 (face font-lock-string-face fontified t) 274 275 (face font-lock-string-face fontified t) 275 276 (face font-lock-string-face fontified t) 276 277 (face font-lock-string-face fontified t) 277 278 (face font-lock-string-face fontified t) 278 279 (face font-lock-string-face fontified t) 279 280 (face font-lock-string-face fontified t) 280 281 (face font-lock-string-face fontified t) 281 282 (face font-lock-string-face fontified t) 282 283 (face font-lock-string-face fontified t) 283 284 (face font-lock-string-face fontified t) 284 285 (face font-lock-string-face fontified t) 285 286 (face font-lock-string-face fontified t) 286 287 (face font-lock-string-face fontified t) 287 288 (face font-lock-string-face fontified t) 288 289 (face font-lock-string-face fontified t) 289 290 (face font-lock-string-face fontified t) 290 291 (face font-lock-string-face fontified t) 291 292 (face font-lock-string-face fontified t) 292 293 (face font-lock-string-face fontified t) 293 294 (face font-lock-string-face fontified t) 294 295 (face font-lock-string-face fontified t) 295 296 (face font-lock-string-face fontified t) 296 297 (face font-lock-string-face fontified t) 297 298 (face font-lock-string-face fontified t) 298 299 (face font-lock-string-face fontified t) 299 300 (face font-lock-string-face fontified t) 300 301 (face font-lock-string-face fontified t) 301 302 (face font-lock-string-face fontified t) 302 303 (fontified t) 303 304 (fontified t) 304 305 (fontified t) 305 306 (fontified t) 306 307 (fontified t) 307 308 (face (rainbow-delimiters-depth-2-face) fontified t) 308 309 (fontified t) 309 310 (fontified t) 310 314 (fontified t) 314 315 (fontified t) 315 316 (fontified t) 316 317 (fontified t) 317 318 (fontified t) 318 319 (fontified t) 319 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-2-face) fontified t) 321 322 (face font-lock-string-face fontified t) 322 323 (face font-lock-string-face fontified t) 323 324 (face font-lock-string-face fontified t) 324 325 (face font-lock-string-face fontified t) 325 326 (face font-lock-string-face fontified t) 326 327 (face font-lock-string-face fontified t) 327 328 (face font-lock-string-face fontified t) 328 329 (face font-lock-string-face fontified t) 329 330 (face font-lock-string-face fontified t) 330 331 (face font-lock-string-face fontified t) 331 332 (face font-lock-string-face fontified t) 332 333 (face font-lock-string-face fontified t) 333 334 (face font-lock-string-face fontified t) 334 335 (face font-lock-string-face fontified t) 335 345 (face font-lock-string-face fontified t) 345 346 (face font-lock-string-face fontified t) 346 347 (face font-lock-string-face fontified t) 347 348 (face font-lock-string-face fontified t) 348 349 (face font-lock-string-face fontified t) 349 350 (face font-lock-string-face fontified t) 350 351 (face font-lock-string-face fontified t) 351 352 (face font-lock-string-face fontified t) 352 353 (face font-lock-string-face fontified t) 353 354 (fontified t) 354 355 (fontified t) 355 356 (fontified t) 356 357 (fontified t) 357 358 (face (rainbow-delimiters-depth-2-face) fontified t) 358 359 (fontified t) 359 360 (fontified t)) . 38) (undo-tree-id2602 . 61) (undo-tree-id2603 . -359) (undo-tree-id2604 . -160) (undo-tree-id2605 . -346) (undo-tree-id2606 . -196) (undo-tree-id2607 . -310) (undo-tree-id2608 . -322) (undo-tree-id2609 . -310) (undo-tree-id2610 . -310) (undo-tree-id2611 . -32) (undo-tree-id2612 . -346) (undo-tree-id2613 . -310) (undo-tree-id2614 . -310) (undo-tree-id2615 . -314) (undo-tree-id2616 . -314) (undo-tree-id2617 . -314) (undo-tree-id2618 . -314) (undo-tree-id2619 . -314) (undo-tree-id2620 . -314) (undo-tree-id2621 . -314) (undo-tree-id2622 . -314) (undo-tree-id2623 . -314) (undo-tree-id2624 . -314) (undo-tree-id2625 . -314) (undo-tree-id2626 . -314) (undo-tree-id2627 . -314) (undo-tree-id2628 . -314) (undo-tree-id2629 . -314) (undo-tree-id2630 . -314) (undo-tree-id2631 . -314) (undo-tree-id2632 . -314) (undo-tree-id2633 . -314) (undo-tree-id2634 . -314) (undo-tree-id2635 . -314) (undo-tree-id2636 . -314) (undo-tree-id2637 . -314) (undo-tree-id2638 . -314) (undo-tree-id2639 . -314) (undo-tree-id2640 . -314) (undo-tree-id2641 . -314) (undo-tree-id2642 . -314) (undo-tree-id2643 . -314) (undo-tree-id2644 . -314) (undo-tree-id2645 . -314) (undo-tree-id2646 . -314) (undo-tree-id2647 . -314) (undo-tree-id2648 . -314) (undo-tree-id2649 . -314) (undo-tree-id2650 . -314) (undo-tree-id2651 . -314) (undo-tree-id2652 . -314) (undo-tree-id2653 . -314) (undo-tree-id2654 . -314) (undo-tree-id2655 . -314) (undo-tree-id2656 . -314) (undo-tree-id2657 . -314) (undo-tree-id2658 . -314) (undo-tree-id2659 . -310) (undo-tree-id2660 . -313) (undo-tree-id2661 . -313) (undo-tree-id2662 . -313) (undo-tree-id2663 . -313) (undo-tree-id2664 . -313) (undo-tree-id2665 . -313) (undo-tree-id2666 . -313) (undo-tree-id2667 . -313) (undo-tree-id2668 . -313) (undo-tree-id2669 . -313) (undo-tree-id2670 . -313) (undo-tree-id2671 . -313) (undo-tree-id2672 . -313) (undo-tree-id2673 . -313) (undo-tree-id2674 . -313) (undo-tree-id2675 . -313) (undo-tree-id2676 . -313) (undo-tree-id2677 . -313) (undo-tree-id2678 . -313) (undo-tree-id2679 . -313) (undo-tree-id2680 . -313) (undo-tree-id2681 . -313) (undo-tree-id2682 . -313) (undo-tree-id2683 . -313) (undo-tree-id2684 . -313) (undo-tree-id2685 . -313) (undo-tree-id2686 . -313) (undo-tree-id2687 . -313) (undo-tree-id2688 . -313) (undo-tree-id2689 . -313) (undo-tree-id2690 . -313) (undo-tree-id2691 . -313) (undo-tree-id2692 . -313) (undo-tree-id2693 . -313) (undo-tree-id2694 . -313) (undo-tree-id2695 . -313) (undo-tree-id2696 . -313) (undo-tree-id2697 . -313) (undo-tree-id2698 . -313) (undo-tree-id2699 . -360) (undo-tree-id2700 . -360) 351 (t 26052 32448 183018 93000)) nil (26052 32474 257462 415000) 0 nil])
([nil nil ((63 . 66) (t 26052 32474 276977 273000)) nil (26052 32503 154572 821000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -38) (undo-tree-id2705 . -4) 42 (38 . 42) (38 . 39) (#("    const float pi = 3.14195;
    printf(\"Value of pi: %f\\n\", pi);
" 0 4 (fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face c-type c-decl-id-start fontified t) 15 16 (fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 53 (face font-lock-string-face fontified t) 53 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 66 (fontified t) 66 67 (fontified t)) . 38) (undo-tree-id2706 . 39) (undo-tree-id2707 . -66)) nil (26052 32503 154571 994000) 0 nil])
([nil nil ((38 . 105) (#("
" 0 1 (fontified nil)) . 38) (undo-tree-id2703 . 1) (#("    " 0 4 (fontified nil)) . 38) (undo-tree-id2704 . -4) (38 . 42)) nil (26052 32503 154569 989000) 0 nil])
([nil nil ((22 . 39) (21 . 22) (20 . 21) 20) nil (26052 32503 154568 337000) 0 nil])
([nil nil ((39 . 40) 38) nil (26052 32503 154567 568000) 0 nil])
([nil nil ((#("    const float pi = 3.14195;
" 0 4 (fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face c-type c-decl-id-start fontified t) 15 16 (fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t)) . 58) (undo-tree-id2701 . -29) (undo-tree-id2702 . -16) 74) nil (26052 32503 154566 366000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 91) (92 . 93) 91 (#("p" 0 1 (fontified t)) . 90) (91 . 92) 90) nil (26052 32503 154553 340000) 0 nil])
([nil nil ((#("#define PI 3.14195
" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (face font-lock-preprocessor-face c-in-sws t fontified t) 6 7 (face font-lock-preprocessor-face c-in-sws t fontified t) 7 8 (c-in-sws t fontified t) 8 9 (face font-lock-variable-name-face c-in-sws t fontified t) 9 10 (face font-lock-variable-name-face c-in-sws t fontified t) 10 11 (c-in-sws t fontified t) 11 12 (c-in-sws t fontified t) 12 13 (c-in-sws t fontified t) 13 14 (c-in-sws t fontified t) 14 15 (c-in-sws t fontified t) 15 16 (c-in-sws t fontified t) 16 17 (c-in-sws t fontified t) 17 18 (c-in-sws t fontified t) 18 19 (fontified t c-in-sws t)) . 21) (undo-tree-id3167 . -18) (undo-tree-id3168 . -18) (undo-tree-id3169 . -4) 25 (t 26052 32503 174336 890000)) nil (26052 32564 484843 453000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 21) (undo-tree-id3166 . -1)) nil (26052 32564 484842 76000) 0 nil])
([nil nil ((70 . 71) (#(")" 0 1 (fontified nil)) . -69) (69 . 70) (#(")" 0 1 (fontified nil)) . -69) (69 . 70) (65 . 69) (64 . 65) (63 . 64) (#("\"" 0 1 (fontified nil)) . -62) (62 . 63) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -62) (57 . 63) (56 . 57) (50 . 56) (#("%" 0 1 (face font-lock-string-face fontified t)) . -50) (undo-tree-id3163 . -1) 51 (50 . 51) (49 . 51) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -49) (49 . 50) (48 . 50) (42 . 48) (38 . 42) (38 . 39) (#("    printf(\"Value of pi: %f\\n\", PI);
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (face font-lock-string-face fontified t) 12 13 (face font-lock-string-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 15 (face font-lock-string-face fontified t) 15 16 (face font-lock-string-face fontified t) 16 17 (face font-lock-string-face fontified t) 17 18 (face font-lock-string-face fontified t) 18 19 (face font-lock-string-face fontified t) 19 20 (face font-lock-string-face fontified t) 20 21 (face font-lock-string-face fontified t) 21 22 (face font-lock-string-face fontified t) 22 23 (face font-lock-string-face fontified t) 23 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t) 25 26 (face font-lock-string-face fontified t) 26 27 (face font-lock-string-face fontified t) 27 28 (face font-lock-string-face fontified t) 28 29 (face font-lock-string-face fontified t) 29 30 (face font-lock-string-face fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (fontified t) 36 37 (fontified t)) . 38) (undo-tree-id3164 . 3) (undo-tree-id3165 . -36)) nil (26052 32564 484840 713000) 0 nil])
([nil nil ((89 . 90) (76 . 89) (71 . 76) 70) nil (26052 32564 484838 102000) 0 nil])
([nil nil ((65 . 66) (#("glob" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 65) (undo-tree-id3160 . -3) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1)) nil (26052 32564 484837 453000) 0 nil])
([nil nil ((77 . 78) (#("glob" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t)) . 77) (undo-tree-id3155 . -3) (undo-tree-id3156 . -2) (undo-tree-id3157 . -2) (undo-tree-id3158 . -4) (undo-tree-id3159 . -4) 79) nil (26052 32564 484836 163000) 0 nil])
([nil nil ((94 . 96) (89 . 94) (84 . 89) 77) nil (26052 32564 484834 100000) 0 nil])
([nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 84) (undo-tree-id2788 . -5) (undo-tree-id2789 . -5) (undo-tree-id2790 . -5) (undo-tree-id2791 . -5) (undo-tree-id2792 . -5) (undo-tree-id2793 . -5) (undo-tree-id2794 . -5) (undo-tree-id2795 . -5) (undo-tree-id2796 . -5) (undo-tree-id2797 . -5) (undo-tree-id2798 . -5) (undo-tree-id2799 . -5) (undo-tree-id2800 . -5) (undo-tree-id2801 . -5) (undo-tree-id2802 . -5) (undo-tree-id2803 . -5) (undo-tree-id2804 . -5) (undo-tree-id2805 . -5) (undo-tree-id2806 . -5) (undo-tree-id2807 . -5) (undo-tree-id2808 . -5) (undo-tree-id2809 . -5) (undo-tree-id2810 . -5) (undo-tree-id2811 . -5) (undo-tree-id2812 . -5) (undo-tree-id2813 . -5) (undo-tree-id2814 . -5) (undo-tree-id2815 . -5) (undo-tree-id2816 . -5) (undo-tree-id2817 . -5) (undo-tree-id2818 . -5) (undo-tree-id2819 . -5) (undo-tree-id2820 . -5) (undo-tree-id2821 . -5) (undo-tree-id2822 . -5) (undo-tree-id2823 . -5) (undo-tree-id2824 . -5) (undo-tree-id2825 . -5) (undo-tree-id2826 . -5) (undo-tree-id2827 . -5) (undo-tree-id2828 . -5) (undo-tree-id2829 . -5) (undo-tree-id2830 . -5) (undo-tree-id2831 . -5) (undo-tree-id2832 . -5) (undo-tree-id2833 . -5) (undo-tree-id2834 . -5) (undo-tree-id2835 . -5) (undo-tree-id2836 . -5) (undo-tree-id2837 . -5) (undo-tree-id2838 . -5) (undo-tree-id2839 . -5) (undo-tree-id2840 . -5) (undo-tree-id2841 . -5) (undo-tree-id2842 . -5) (undo-tree-id2843 . -5) (undo-tree-id2844 . -5) (undo-tree-id2845 . -5) (undo-tree-id2846 . -5) (undo-tree-id2847 . -5) (undo-tree-id2848 . -5) (undo-tree-id2849 . -5) (undo-tree-id2850 . -5) (undo-tree-id2851 . -5) (undo-tree-id2852 . -5) (undo-tree-id2853 . -5) (undo-tree-id2854 . -5) (undo-tree-id2855 . -5) (undo-tree-id2856 . -5) (undo-tree-id2857 . -5) (undo-tree-id2858 . -5) (undo-tree-id2859 . -5) (undo-tree-id2860 . -5) (undo-tree-id2861 . -5) (undo-tree-id2862 . -5) (undo-tree-id2863 . -5) (undo-tree-id2864 . -5) (undo-tree-id2865 . -5) (undo-tree-id2866 . -5) (undo-tree-id2867 . -5) (undo-tree-id2868 . -5) (undo-tree-id2869 . -5) (undo-tree-id2870 . -5) (undo-tree-id2871 . -5) (undo-tree-id2872 . -5) (undo-tree-id2873 . -5) (undo-tree-id2874 . -5) (undo-tree-id2875 . -5) (undo-tree-id2876 . -5) (undo-tree-id2877 . -5) (undo-tree-id2878 . -5) (undo-tree-id2879 . -5) (undo-tree-id2880 . -5) (undo-tree-id2881 . -5) (undo-tree-id2882 . -5) (undo-tree-id2883 . -5) (undo-tree-id2884 . -5) (undo-tree-id2885 . -5) (undo-tree-id2886 . -5) (undo-tree-id2887 . -5) (undo-tree-id2888 . -5) (undo-tree-id2889 . -5) (undo-tree-id2890 . -5) (undo-tree-id2891 . -5) (undo-tree-id2892 . -5) (undo-tree-id2893 . -5) (undo-tree-id2894 . -5) (undo-tree-id2895 . -5) (undo-tree-id2896 . -5) (undo-tree-id2897 . -5) (undo-tree-id2898 . -5) (undo-tree-id2899 . -5) (undo-tree-id2900 . -5) (undo-tree-id2901 . -5) (undo-tree-id2902 . -5) (undo-tree-id2903 . -5) (undo-tree-id2904 . -5) (undo-tree-id2905 . -5) (undo-tree-id2906 . -5) (undo-tree-id2907 . -5) (undo-tree-id2908 . -5) (undo-tree-id2909 . -5) (undo-tree-id2910 . -5) (undo-tree-id2911 . -5) (undo-tree-id2912 . -5) (undo-tree-id2913 . -5) (undo-tree-id2914 . -5) (undo-tree-id2915 . -5) (undo-tree-id2916 . -5) (undo-tree-id2917 . -5) (undo-tree-id2918 . -5) (undo-tree-id2919 . -5) (undo-tree-id2920 . -5) (undo-tree-id2921 . -5) (undo-tree-id2922 . -5) (undo-tree-id2923 . -5) (undo-tree-id2924 . -5) (undo-tree-id2925 . -5) (undo-tree-id2926 . -5) (undo-tree-id2927 . -5) (undo-tree-id2928 . -5) (undo-tree-id2929 . -5) (undo-tree-id2930 . -5) (undo-tree-id2931 . -5) (undo-tree-id2932 . -5) (undo-tree-id2933 . -5) (undo-tree-id2934 . -5) (undo-tree-id2935 . -5) (undo-tree-id2936 . -5) (undo-tree-id2937 . -5) (undo-tree-id2938 . -5) (undo-tree-id2939 . -5) (undo-tree-id2940 . -5) (undo-tree-id2941 . -5) (undo-tree-id2942 . -5) (undo-tree-id2943 . -5) (undo-tree-id2944 . -5) (undo-tree-id2945 . -5) (undo-tree-id2946 . -5) (undo-tree-id2947 . -5) (undo-tree-id2948 . -5) (undo-tree-id2949 . -5) (undo-tree-id2950 . -5) (undo-tree-id2951 . -5) (undo-tree-id2952 . -5) (undo-tree-id2953 . -5) (undo-tree-id2954 . -5) (undo-tree-id2955 . -5) (undo-tree-id2956 . -5) (undo-tree-id2957 . -5) (undo-tree-id2958 . -5) (undo-tree-id2959 . -1) (undo-tree-id2960 . -5) (undo-tree-id2961 . -5) (undo-tree-id2962 . -5) (undo-tree-id2963 . -5) (undo-tree-id2964 . -5) (undo-tree-id2965 . -5) (undo-tree-id2966 . -5) (undo-tree-id2967 . -5) (undo-tree-id2968 . -5) (undo-tree-id2969 . -5) (undo-tree-id2970 . -5) (undo-tree-id2971 . -5) (#("prinf" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 89) (undo-tree-id2972 . -4) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -2) (undo-tree-id3026 . -2) (undo-tree-id3027 . -2) (undo-tree-id3028 . -2) (undo-tree-id3029 . -2) (undo-tree-id3030 . -2) (undo-tree-id3031 . -2) (undo-tree-id3032 . -2) (undo-tree-id3033 . -2) (undo-tree-id3034 . -2) (undo-tree-id3035 . -2) (undo-tree-id3036 . -2) (undo-tree-id3037 . -2) (undo-tree-id3038 . -2) (undo-tree-id3039 . -2) (undo-tree-id3040 . -2) (undo-tree-id3041 . -3) (undo-tree-id3042 . -3) (undo-tree-id3043 . -3) (undo-tree-id3044 . -3) (undo-tree-id3045 . -3) (undo-tree-id3046 . -3) (undo-tree-id3047 . -3) (undo-tree-id3048 . -3) (undo-tree-id3049 . -3) (undo-tree-id3050 . -3) (undo-tree-id3051 . -3) (undo-tree-id3052 . -3) (undo-tree-id3053 . -3) (undo-tree-id3054 . -3) (undo-tree-id3055 . -3) (undo-tree-id3056 . -3) (undo-tree-id3057 . -3) (undo-tree-id3058 . -3) (undo-tree-id3059 . -3) (undo-tree-id3060 . -3) (undo-tree-id3061 . -3) (undo-tree-id3062 . -3) (undo-tree-id3063 . -3) (undo-tree-id3064 . -4) (undo-tree-id3065 . -4) (undo-tree-id3066 . -4) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -4) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) (undo-tree-id3080 . -5) (undo-tree-id3081 . -5) (undo-tree-id3082 . -5) (undo-tree-id3083 . -5) (undo-tree-id3084 . -5) (undo-tree-id3085 . -5) (undo-tree-id3086 . -5) (undo-tree-id3087 . -5) (undo-tree-id3088 . -5) (undo-tree-id3089 . -5) (undo-tree-id3090 . -5) (undo-tree-id3091 . -5) (undo-tree-id3092 . -5) (undo-tree-id3093 . -5) (undo-tree-id3094 . -5) (undo-tree-id3095 . -5) (undo-tree-id3096 . -5) (undo-tree-id3097 . -5) (undo-tree-id3098 . -5) (undo-tree-id3099 . -5) (undo-tree-id3100 . -5) (undo-tree-id3101 . -5) (undo-tree-id3102 . -5) (undo-tree-id3103 . -5) (undo-tree-id3104 . -5) (undo-tree-id3105 . -5) (undo-tree-id3106 . -5) (undo-tree-id3107 . -5) (undo-tree-id3108 . -5) (undo-tree-id3109 . -5) (undo-tree-id3110 . -5) (undo-tree-id3111 . -5) (undo-tree-id3112 . -5) (undo-tree-id3113 . -5) (undo-tree-id3114 . -5) (undo-tree-id3115 . -5) (undo-tree-id3116 . -5) (undo-tree-id3117 . -5) (undo-tree-id3118 . -5) (undo-tree-id3119 . -5) (undo-tree-id3120 . -5) (undo-tree-id3121 . -5) (undo-tree-id3122 . -5) (undo-tree-id3123 . -5) (undo-tree-id3124 . -5) (undo-tree-id3125 . -5) (undo-tree-id3126 . -5) (undo-tree-id3127 . -5) (undo-tree-id3128 . -5) (undo-tree-id3129 . -5) (undo-tree-id3130 . -5) (undo-tree-id3131 . -4) (undo-tree-id3132 . -5) (undo-tree-id3133 . -5) (undo-tree-id3134 . -5) (undo-tree-id3135 . -5) (undo-tree-id3136 . -5) (undo-tree-id3137 . -5) (undo-tree-id3138 . -5) (#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 94) (undo-tree-id3139 . 1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1)) nil (26052 32564 484828 264000) 0 nil])
([nil nil ((nil rear-nonsticky nil 88 . 89) (#("
" 0 1 (fontified nil)) . -115) (84 . 116) 77) nil (26052 32564 484718 42000) 0 nil])
([nil nil ((98 . 99) (#("lobal" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 98) (undo-tree-id2785 . -4) (undo-tree-id2786 . -5) (undo-tree-id2787 . -5)) nil (26052 32564 484717 447000) 0 nil])
([nil nil ((98 . 103) (#("i" 0 1 (face font-lock-string-face fontified t)) . 98) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1)) nil (26052 32564 484703 93000) 0 nil])
([nil nil ((97 . 102) (#("Global" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t)) . 97) (undo-tree-id2712 . -5) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -6) (undo-tree-id2770 . -6) 98) nil (26052 32564 484697 355000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -115) (undo-tree-id2711 . -4) 119 (114 . 119) 101) nil (26052 32564 484677 502000) 0 nil])
([nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 114) (undo-tree-id2710 . -5) (115 . 119)) nil (26052 32564 484676 306000) 0 nil])
([nil nil ((177 . 178) (#(")" 0 1 (fontified nil)) . -176) (176 . 177) (#(")" 0 1 (fontified nil)) . -176) (176 . 177) (174 . 176) (173 . 174) (#("\"" 0 1 (fontified nil)) . -172) (172 . 173) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -172) (167 . 173) (166 . 167) (160 . 166) (159 . 161) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -159) (159 . 160) (158 . 160) (152 . 158) (143 . 152) (142 . 143) (138 . 142) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -138) (undo-tree-id2708 . -1) 139 (130 . 139) (122 . 130) (121 . 127) (120 . 122) (116 . 120) (#("    " 0 4 (fontified nil)) . 115) (undo-tree-id2709 . -4) (119 . 120) (114 . 119) 101) nil (26052 32564 484673 675000) 0 nil])
([nil nil ((21 . 31) (20 . 21) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 19 . 20) (nil fontified t 19 . 20) (nil c-in-sws t 19 . 20) (19 . 20) 18) nil (26052 32564 484662 771000) 0 nil])
([nil nil ((31 . 32)) nil (26052 32564 484658 639000) 0 nil])
([nil nil ((#("int a = 10;
" 0 1 (face font-lock-type-face c-is-sws t fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 21) (undo-tree-id3463 . 1) (undo-tree-id3464 . -11) (t 26052 32564 505807 167000)) nil (26052 32614 846857 172000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 21) (undo-tree-id3461 . 1) (undo-tree-id3462 . -1)) nil (26052 32614 846856 203000) 0 nil])
([nil nil ((66 . 67) (#(")" 0 1 (fontified nil)) . -65) (65 . 66) (#(")" 0 1 (fontified nil)) . -65) (65 . 66) (62 . 65) (61 . 62) (#("\"" 0 1 (fontified nil)) . -60) (60 . 61) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -60) (58 . 61) (57 . 59) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -57) (57 . 58) (56 . 58) (52 . 56) (#("a" 0 1 (fontified t)) . -52) (undo-tree-id3222 . -1) (#("c" 0 1 (fontified t)) . -53) (undo-tree-id3223 . -1) (#("n" 0 1 (fontified t)) . -54) (undo-tree-id3224 . -1) (#("f" 0 1 (fontified t)) . -55) (undo-tree-id3225 . -1) 56 (50 . 56) (49 . 50) (47 . 49) (#("n" 0 1 (fontified t)) . -47) (undo-tree-id3226 . -1) 48 (42 . 48) (38 . 42) (38 . 39) (#("    printf(\"Global: %d\\n\", a);
    int a = 20;
    printf(\"Local: %d\\n\", a);

    {
        extern int a;
        printf(\"Global: %d\\n\", a);
    }
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (face font-lock-string-face fontified t) 12 13 (face font-lock-string-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 15 (face font-lock-string-face fontified t) 15 16 (face font-lock-string-face fontified t) 16 17 (face font-lock-string-face fontified t) 17 18 (face font-lock-string-face fontified t) 18 19 (face font-lock-string-face fontified t) 19 20 (face font-lock-string-face fontified t) 20 21 (face font-lock-string-face fontified t) 21 22 (face font-lock-string-face fontified t) 22 23 (face font-lock-string-face fontified t) 23 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 35 (fontified t) 35 36 (face font-lock-type-face fontified t) 36 37 (face font-lock-type-face fontified t) 37 38 (face font-lock-type-face c-type c-decl-id-start fontified t) 38 39 (fontified t) 39 40 (face font-lock-variable-name-face fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 50 (fontified t) 50 51 (fontified t rear-nonsticky t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (face font-lock-string-face fontified t) 64 65 (face font-lock-string-face fontified t) 65 66 (face font-lock-string-face fontified t) 66 67 (face font-lock-string-face fontified t) 67 68 (face font-lock-string-face fontified t) 68 69 (face font-lock-string-face fontified t) 69 70 (face font-lock-string-face fontified t) 70 71 (face font-lock-string-face fontified t) 71 72 (fontified t) 72 73 (fontified t) 73 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 76 (fontified t) 76 77 (fontified t) 77 78 (fontified t) 78 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-2-face) fontified t) 83 84 (fontified t) 84 92 (fontified t) 92 93 (face font-lock-keyword-face fontified t) 93 94 (face font-lock-keyword-face fontified t) 94 95 (face font-lock-keyword-face fontified t) 95 96 (face font-lock-keyword-face fontified t) 96 97 (face font-lock-keyword-face fontified t) 97 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 100 (face font-lock-type-face fontified t) 100 101 (face font-lock-type-face fontified t) 101 102 (face font-lock-type-face c-type c-decl-id-start fontified t) 102 103 (fontified t) 103 104 (face font-lock-variable-name-face fontified t) 104 105 (fontified t) 105 106 (fontified t) 106 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 119 (fontified t) 119 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-3-face) fontified t) 121 122 (face font-lock-string-face fontified t) 122 123 (face font-lock-string-face fontified t) 123 124 (face font-lock-string-face fontified t) 124 125 (face font-lock-string-face fontified t) 125 126 (face font-lock-string-face fontified t) 126 127 (face font-lock-string-face fontified t) 127 128 (face font-lock-string-face fontified t) 128 129 (face font-lock-string-face fontified t) 129 130 (face font-lock-string-face fontified t) 130 131 (face font-lock-string-face fontified t) 131 132 (face font-lock-string-face fontified t) 132 133 (face font-lock-string-face fontified t) 133 134 (face font-lock-string-face fontified t) 134 135 (face font-lock-string-face fontified t) 135 136 (fontified t) 136 137 (fontified t) 137 138 (fontified t) 138 139 (face (rainbow-delimiters-depth-3-face) fontified t) 139 140 (fontified t) 140 141 (fontified t) 141 145 (fontified t) 145 146 (face (rainbow-delimiters-depth-2-face) fontified t) 146 147 (fontified t)) . 38) (undo-tree-id3227 . -146) (undo-tree-id3228 . -46) (undo-tree-id3229 . -46) (undo-tree-id3230 . -46) (undo-tree-id3231 . -46) (undo-tree-id3232 . -46) (undo-tree-id3233 . -46) (undo-tree-id3234 . -46) (undo-tree-id3235 . -46) (undo-tree-id3236 . -46) (undo-tree-id3237 . -46) (undo-tree-id3238 . -46) (undo-tree-id3239 . -46) (undo-tree-id3240 . -46) (undo-tree-id3241 . -46) (undo-tree-id3242 . -46) (undo-tree-id3243 . -46) (undo-tree-id3244 . -46) (undo-tree-id3245 . -46) (undo-tree-id3246 . -46) (undo-tree-id3247 . -46) (undo-tree-id3248 . -46) (undo-tree-id3249 . -46) (undo-tree-id3250 . -46) (undo-tree-id3251 . -46) (undo-tree-id3252 . -46) (undo-tree-id3253 . -46) (undo-tree-id3254 . -46) (undo-tree-id3255 . -46) (undo-tree-id3256 . -46) (undo-tree-id3257 . -46) (undo-tree-id3258 . -46) (undo-tree-id3259 . -46) (undo-tree-id3260 . -46) (undo-tree-id3261 . -46) (undo-tree-id3262 . -46) (undo-tree-id3263 . -46) (undo-tree-id3264 . -46) (undo-tree-id3265 . -46) (undo-tree-id3266 . -46) (undo-tree-id3267 . -46) (undo-tree-id3268 . -46) (undo-tree-id3269 . -46) (undo-tree-id3270 . -46) (undo-tree-id3271 . -46) (undo-tree-id3272 . -46) (undo-tree-id3273 . -46) (undo-tree-id3274 . -46) (undo-tree-id3275 . -46) (undo-tree-id3276 . -46) (undo-tree-id3277 . -46) (undo-tree-id3278 . -46) (undo-tree-id3279 . -46) (undo-tree-id3280 . -46) (undo-tree-id3281 . -46) (undo-tree-id3282 . -46) (undo-tree-id3283 . -46) (undo-tree-id3284 . -46) (undo-tree-id3285 . -46) (undo-tree-id3286 . -46) (undo-tree-id3287 . -46) (undo-tree-id3288 . -46) (undo-tree-id3289 . -46) (undo-tree-id3290 . -46) (undo-tree-id3291 . -46) (undo-tree-id3292 . -46) (undo-tree-id3293 . -46) (undo-tree-id3294 . -46) (undo-tree-id3295 . -46) (undo-tree-id3296 . -46) (undo-tree-id3297 . -46) (undo-tree-id3298 . -46) (undo-tree-id3299 . -46) (undo-tree-id3300 . -46) (undo-tree-id3301 . -46) (undo-tree-id3302 . -46) (undo-tree-id3303 . -46) (undo-tree-id3304 . -46) (undo-tree-id3305 . -46) (undo-tree-id3306 . -46) (undo-tree-id3307 . -46) (undo-tree-id3308 . -46) (undo-tree-id3309 . -46) (undo-tree-id3310 . -46) (undo-tree-id3311 . -46) (undo-tree-id3312 . -46) (undo-tree-id3313 . -46) (undo-tree-id3314 . -46) (undo-tree-id3315 . -46) (undo-tree-id3316 . -46) (undo-tree-id3317 . -46) (undo-tree-id3318 . -46) (undo-tree-id3319 . -46) (undo-tree-id3320 . -46) (undo-tree-id3321 . -46) (undo-tree-id3322 . -46) (undo-tree-id3323 . -46) (undo-tree-id3324 . -46) (undo-tree-id3325 . -46) (undo-tree-id3326 . -46) (undo-tree-id3327 . -46) (undo-tree-id3328 . -46) (undo-tree-id3329 . -46) (undo-tree-id3330 . -46) (undo-tree-id3331 . -46) (undo-tree-id3332 . -46) (undo-tree-id3333 . -46) (undo-tree-id3334 . -46) (undo-tree-id3335 . -46) (undo-tree-id3336 . -46) (undo-tree-id3337 . -46) (undo-tree-id3338 . -46) (undo-tree-id3339 . -46) (undo-tree-id3340 . -46) (undo-tree-id3341 . -46) (undo-tree-id3342 . -46) (undo-tree-id3343 . -46) (undo-tree-id3344 . -46) (undo-tree-id3345 . -46) (undo-tree-id3346 . -46) (undo-tree-id3347 . -46) (undo-tree-id3348 . -46) (undo-tree-id3349 . -46) (undo-tree-id3350 . -46) (undo-tree-id3351 . -46) (undo-tree-id3352 . -46) (undo-tree-id3353 . -46) (undo-tree-id3354 . -46) (undo-tree-id3355 . -46) (undo-tree-id3356 . -46) (undo-tree-id3357 . -46) (undo-tree-id3358 . -46) (undo-tree-id3359 . -46) (undo-tree-id3360 . -46) (undo-tree-id3361 . -46) (undo-tree-id3362 . -46) (undo-tree-id3363 . -46) (undo-tree-id3364 . -46) (undo-tree-id3365 . -46) (undo-tree-id3366 . -46) (undo-tree-id3367 . -46) (undo-tree-id3368 . -46) (undo-tree-id3369 . -46) (undo-tree-id3370 . -46) (undo-tree-id3371 . -46) (undo-tree-id3372 . -46) (undo-tree-id3373 . -46) (undo-tree-id3374 . -46) (undo-tree-id3375 . -46) (undo-tree-id3376 . -46) (undo-tree-id3377 . -46) (undo-tree-id3378 . -46) (undo-tree-id3379 . -46) (undo-tree-id3380 . -46) (undo-tree-id3381 . -46) (undo-tree-id3382 . -46) (undo-tree-id3383 . -46) (undo-tree-id3384 . -46) (undo-tree-id3385 . -46) (undo-tree-id3386 . -46) (undo-tree-id3387 . -46) (undo-tree-id3388 . -46) (undo-tree-id3389 . -46) (undo-tree-id3390 . -46) (undo-tree-id3391 . -46) (undo-tree-id3392 . -46) (undo-tree-id3393 . -46) (undo-tree-id3394 . -46) (undo-tree-id3395 . -46) (undo-tree-id3396 . -46) (undo-tree-id3397 . -46) (undo-tree-id3398 . -46) (undo-tree-id3399 . -46) (undo-tree-id3400 . -46) (undo-tree-id3401 . -46) (undo-tree-id3402 . -46) (undo-tree-id3403 . -46) (undo-tree-id3404 . -46) (undo-tree-id3405 . -46) (undo-tree-id3406 . -46) (undo-tree-id3407 . -59) (undo-tree-id3408 . -59) (undo-tree-id3409 . -59) (undo-tree-id3410 . -59) (undo-tree-id3411 . -59) (undo-tree-id3412 . -59) (undo-tree-id3413 . -59) (undo-tree-id3414 . -59) (undo-tree-id3415 . -59) (undo-tree-id3416 . -59) (undo-tree-id3417 . -59) (undo-tree-id3418 . -59) (undo-tree-id3419 . -59) (undo-tree-id3420 . -59) (undo-tree-id3421 . -59) (undo-tree-id3422 . -59) (undo-tree-id3423 . -59) (undo-tree-id3424 . -59) (undo-tree-id3425 . -59) (undo-tree-id3426 . -59) (undo-tree-id3427 . -59) (undo-tree-id3428 . -59) (undo-tree-id3429 . -59) (undo-tree-id3430 . -59) (undo-tree-id3431 . -59) (undo-tree-id3432 . -59) (undo-tree-id3433 . -59) (undo-tree-id3434 . -59) (undo-tree-id3435 . -59) (undo-tree-id3436 . -59) (undo-tree-id3437 . -59) (undo-tree-id3438 . -59) (undo-tree-id3439 . -59) (undo-tree-id3440 . -59) (undo-tree-id3441 . -59) (undo-tree-id3442 . -59) (undo-tree-id3443 . -59) (undo-tree-id3444 . -59) (undo-tree-id3445 . -59) (undo-tree-id3446 . -59) (undo-tree-id3447 . -59) (undo-tree-id3448 . -59) (undo-tree-id3449 . -59) (undo-tree-id3450 . -59) (undo-tree-id3451 . -59) (undo-tree-id3452 . -59) (undo-tree-id3453 . -59) (undo-tree-id3454 . -59) (undo-tree-id3455 . -59) (undo-tree-id3456 . -59) (undo-tree-id3457 . -59) (undo-tree-id3458 . -59) (undo-tree-id3459 . -59) (undo-tree-id3460 . -59)) nil (26052 32614 846850 693000) 0 nil])
([nil nil ((59 . 60) (#("d" 0 1 (face font-lock-string-face fontified t)) . 59) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1)) nil (26052 32614 846719 979000) 0 nil])
([nil nil ((88 . 89) (#(")" 0 1 (fontified nil)) . -87) (87 . 88) (#(")" 0 1 (fontified nil)) . -87) (87 . 88) (84 . 87) (83 . 84) (#("\"" 0 1 (fontified nil)) . -82) (82 . 83) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -82) (81 . 83) (#("1" 0 1 (face font-lock-string-face fontified t)) . -81) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (#("0" 0 1 (face font-lock-string-face fontified t)) . -82) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -83) (undo-tree-id3217 . -1) 84 (80 . 84) (79 . 81) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -79) (79 . 80) (78 . 80) (76 . 78) (#("f" 0 1 (fontified t)) . -76) (undo-tree-id3218 . -1) (#("t" 0 1 (fontified t)) . -77) (undo-tree-id3219 . -1) 78 (72 . 78) (67 . 72) 59) nil (26052 32614 846717 978000) 0 nil])
([nil nil ((nil rear-nonsticky nil 93 . 94) (#("
" 0 1 (fontified nil)) . -177) (89 . 178) 88) nil (26052 32614 846713 67000) 0 nil])
([nil nil ((nil rear-nonsticky nil 93 . 94) (#("
" 0 1 (fontified nil)) . -111) (89 . 112) 81) nil (26052 32614 846712 409000) 0 nil])
([nil nil ((103 . 105)) nil (26052 32614 846711 772000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-string-face fontified t)) . -128) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) 129 (127 . 129)) nil (26052 32614 846710 390000) 0 nil])
([nil nil ((150 . 152)) nil (26052 32614 846702 119000) 0 nil])
([nil nil ((174 . 176)) nil (26052 32614 846701 739000) 0 nil])
([nil nil ((198 . 199)) nil (26052 32614 846700 948000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . 199) (undo-tree-id3170 . 1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1)) nil (26052 32614 846697 550000) 0 nil])
([nil nil ((nil fontified t 212 . 213) (nil fontified t 211 . 212) (nil face font-lock-string-face 211 . 212) (#("\"," 0 1 (face font-lock-string-face fontified t) 1 2 (fontified t)) . -209) (211 . 215) (nil fontified t 188 . 189) (nil fontified t 187 . 188) (nil face font-lock-string-face 187 . 188) (#("\"," 0 1 (face font-lock-string-face fontified t) 1 2 (fontified t)) . -185) (187 . 191) (nil fontified t 162 . 163) (nil fontified t 161 . 162) (nil face font-lock-string-face 161 . 162) (#("\"," 0 1 (face font-lock-string-face fontified t) 1 2 (fontified t)) . -159) (161 . 165) (nil fontified t 136 . 137) (nil fontified t 135 . 136) (nil face font-lock-string-face 135 . 136) (#("\"," 0 1 (face font-lock-string-face fontified t) 1 2 (fontified t)) . -133) (135 . 139) (nil fontified t 111 . 112) (nil fontified t 110 . 111) (nil face font-lock-string-face 110 . 111) (#("\"," 0 1 (face font-lock-string-face fontified t) 1 2 (fontified t)) . -108) (110 . 114) (nil fontified t 85 . 86) (t 26052 32614 867014 62000) (nil fontified t 84 . 85) (t 26052 32614 867014 62000) (nil face font-lock-string-face 84 . 85) (t 26052 32614 867014 62000) (#("\"," 0 1 (face font-lock-string-face fontified t) 1 2 (fontified t)) . -82) (t 26052 32614 867014 62000) (84 . 88) (t 26052 32614 867014 62000)) nil (26052 32626 6769 976000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -209) (210 . 210) (#("&" 0 1 (fontified t)) . -186) (187 . 187) (#("&" 0 1 (fontified t)) . -161) (162 . 162) (#("&" 0 1 (fontified t)) . -136) (137 . 137) (#("&" 0 1 (fontified t)) . -112) (113 . 113) (#("&" 0 1 (fontified t)) . -87) (t 26052 32626 27281 464000) (88 . 88) (t 26052 32626 27281 464000)) nil (26052 32644 783799 136000) 0 nil])
([nil nil ((85 . 88) (110 . 111) (134 . 136) (159 . 160) (184 . 185) (207 . 210) (t 26052 32644 804398 7000)) nil (26052 32684 838327 763000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . 207) (#(" " 0 1 (fontified t)) . 184) (#(" " 0 1 (fontified t)) . 159) (#("  " 0 2 (fontified t)) . 134) (#(" " 0 1 (fontified t)) . 110) (#("   " 0 3 (fontified t)) . 85)) nil (26052 32684 838325 439000) 0 nil])
([nil nil ((82 . 85) (107 . 108) (131 . 133) (156 . 157) (181 . 182) (204 . 207) (t 26052 32644 804398 7000)) nil (26052 32684 838320 649000) 0 nil])
([nil nil ((#("    float n; scanf(\"%f\", &n);
    printf(\"%f   \\n\", n);
    printf(\"%10f \\n\", n);
    printf(\"%2f  \\n\", n);
    printf(\"%.2f \\n\", n);
    printf(\"%.0f \\n\", n);
    printf(\"%e   \\n\", n);
" 0 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face c-type c-decl-id-start fontified t) 9 10 (fontified t) 10 11 (face font-lock-variable-name-face fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 20 (face font-lock-string-face fontified t) 20 21 (face font-lock-string-face fontified t) 21 22 (face font-lock-string-face fontified t) 22 23 (face font-lock-string-face fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 47 (face font-lock-string-face fontified t) 47 50 (face font-lock-string-face fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 59 (fontified t) 59 60 (rear-nonsticky t fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-2-face) fontified t) 67 68 (face font-lock-string-face fontified t) 68 69 (face font-lock-string-face fontified t) 69 70 (face font-lock-string-face fontified t) 70 71 (face font-lock-string-face fontified t) 71 72 (face font-lock-string-face fontified t) 72 73 (face font-lock-string-face fontified t) 73 76 (face font-lock-string-face fontified t) 76 77 (fontified t) 77 78 (fontified t) 78 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-2-face) fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 85 (fontified t) 85 86 (fontified t rear-nonsticky t) 86 87 (fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (face font-lock-string-face fontified t) 94 95 (face font-lock-string-face fontified t) 95 96 (face font-lock-string-face fontified t) 96 97 (face font-lock-string-face fontified t) 97 99 (face font-lock-string-face fontified t) 99 102 (face font-lock-string-face fontified t) 102 103 (fontified t) 103 104 (fontified t) 104 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-2-face) fontified t) 106 107 (fontified t) 107 108 (fontified t) 108 112 (fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-2-face) fontified t) 119 120 (face font-lock-string-face fontified t) 120 121 (face font-lock-string-face fontified t) 121 122 (face font-lock-string-face fontified t) 122 123 (face font-lock-string-face fontified t) 123 124 (face font-lock-string-face fontified t) 124 125 (face font-lock-string-face fontified t) 125 128 (face font-lock-string-face fontified t) 128 129 (fontified t) 129 130 (fontified t) 130 131 (fontified t) 131 132 (face (rainbow-delimiters-depth-2-face) fontified t) 132 133 (fontified t) 133 134 (fontified t) 134 138 (fontified t) 138 139 (fontified t) 139 140 (fontified t) 140 141 (fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 144 (fontified t) 144 145 (face (rainbow-delimiters-depth-2-face) fontified t) 145 146 (face font-lock-string-face fontified t) 146 147 (face font-lock-string-face fontified t) 147 148 (face font-lock-string-face fontified t) 148 149 (face font-lock-string-face fontified t) 149 150 (face font-lock-string-face fontified t) 150 151 (face font-lock-string-face fontified t) 151 154 (face font-lock-string-face fontified t) 154 155 (fontified t) 155 156 (fontified t) 156 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-2-face) fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 164 (fontified t) 164 165 (fontified t) 165 166 (fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 169 (fontified t) 169 170 (fontified t) 170 171 (face (rainbow-delimiters-depth-2-face) fontified t) 171 172 (face font-lock-string-face fontified t) 172 173 (face font-lock-string-face fontified t) 173 174 (face font-lock-string-face fontified t) 174 177 (face font-lock-string-face fontified t) 177 180 (face font-lock-string-face fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 184 (face (rainbow-delimiters-depth-2-face) fontified t) 184 185 (fontified t) 185 186 (fontified t)) . 38) (undo-tree-id3666 . 9) (undo-tree-id3667 . -86) (undo-tree-id3668 . -185) (undo-tree-id3669 . -86) (undo-tree-id3670 . -30) (undo-tree-id3671 . -164) (undo-tree-id3672 . -34) (undo-tree-id3673 . -82) (undo-tree-id3674 . -30) (undo-tree-id3675 . -164) (undo-tree-id3676 . -82) (undo-tree-id3677 . -82) (undo-tree-id3678 . -86) (undo-tree-id3679 . -86) (undo-tree-id3680 . -86) (undo-tree-id3681 . -86) (undo-tree-id3682 . -86) (undo-tree-id3683 . -86) (undo-tree-id3684 . -86) (undo-tree-id3685 . -86) (undo-tree-id3686 . -86) (undo-tree-id3687 . -86) (undo-tree-id3688 . -86) (undo-tree-id3689 . -86) (undo-tree-id3690 . -86) (undo-tree-id3691 . -86) (undo-tree-id3692 . -86) (undo-tree-id3693 . -86) (undo-tree-id3694 . -86) (undo-tree-id3695 . -86) (undo-tree-id3696 . -86) (undo-tree-id3697 . -86) (undo-tree-id3698 . -86) (undo-tree-id3699 . -86) (undo-tree-id3700 . -86) (undo-tree-id3701 . -86) (undo-tree-id3702 . -60) (undo-tree-id3703 . -60) (undo-tree-id3704 . -60) (undo-tree-id3705 . -60) (undo-tree-id3706 . -60) (undo-tree-id3707 . -60) (undo-tree-id3708 . -60) (undo-tree-id3709 . -60) (undo-tree-id3710 . -60) (undo-tree-id3711 . -60) (undo-tree-id3712 . -60) (undo-tree-id3713 . -60) (undo-tree-id3714 . -60) (undo-tree-id3715 . -60) (undo-tree-id3716 . -34) (undo-tree-id3717 . -34) (undo-tree-id3718 . -34) (undo-tree-id3719 . -34) (undo-tree-id3720 . -34) (undo-tree-id3721 . -34) (undo-tree-id3722 . -34) (undo-tree-id3723 . -34) (undo-tree-id3724 . -34) (undo-tree-id3725 . -34) (undo-tree-id3726 . -34) (undo-tree-id3727 . -34) (undo-tree-id3728 . -34) (undo-tree-id3729 . -34) (undo-tree-id3730 . -34) (undo-tree-id3731 . -34) (undo-tree-id3732 . -34) (undo-tree-id3733 . -34) (undo-tree-id3734 . -34) (undo-tree-id3735 . -34) (undo-tree-id3736 . -34) (undo-tree-id3737 . -30) (undo-tree-id3738 . -30) (undo-tree-id3739 . -30) (undo-tree-id3740 . -30) (undo-tree-id3741 . -30) (undo-tree-id3742 . -30) (undo-tree-id3743 . -30) (undo-tree-id3744 . -30) (undo-tree-id3745 . -30) (undo-tree-id3746 . -30) (undo-tree-id3747 . -30) (undo-tree-id3748 . -30) (undo-tree-id3749 . -30) (undo-tree-id3750 . -30) (undo-tree-id3751 . -30) (undo-tree-id3752 . -30) (undo-tree-id3753 . -30) (undo-tree-id3754 . -30) (undo-tree-id3755 . -30) (undo-tree-id3756 . -30) (undo-tree-id3757 . -30) (undo-tree-id3758 . -30) (undo-tree-id3759 . -30) (undo-tree-id3760 . -30) (undo-tree-id3761 . -30) (undo-tree-id3762 . -30) (undo-tree-id3763 . -30) (undo-tree-id3764 . -30) (undo-tree-id3765 . -30) (undo-tree-id3766 . -30) (undo-tree-id3767 . -30) (undo-tree-id3768 . -30) (undo-tree-id3769 . -30) (undo-tree-id3770 . -30) (undo-tree-id3771 . -30) (undo-tree-id3772 . -30) (undo-tree-id3773 . -30) (undo-tree-id3774 . -30) (undo-tree-id3775 . -30) (undo-tree-id3776 . -30) (undo-tree-id3777 . -30) (undo-tree-id3778 . -30) (undo-tree-id3779 . -30) (undo-tree-id3780 . -30) (undo-tree-id3781 . -30) (undo-tree-id3782 . -30) (undo-tree-id3783 . -30) (undo-tree-id3784 . -30) (undo-tree-id3785 . -30) (undo-tree-id3786 . -86) (undo-tree-id3787 . -30) (undo-tree-id3788 . -30) (undo-tree-id3789 . -30) (undo-tree-id3790 . -30) (undo-tree-id3791 . -30) (undo-tree-id3792 . -186) 68 (t 26052 32684 858690 855000)) nil (26052 33318 982342 42000) 0 nil])
([nil nil ((#("#include <stdio.h>

int main(void) {
}
" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 8 (face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (c-in-sws t fontified t) 9 10 (face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t category c-<-as-paren-syntax fontified t) 10 17 (face font-lock-string-face c-in-sws t fontified t) 17 18 (face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t category c->-as-paren-syntax fontified t) 18 19 (c-in-sws t fontified t) 19 20 (c-is-sws t fontified t) 20 21 (face font-lock-type-face fontified t c-is-sws t) 21 22 (face font-lock-type-face fontified t) 22 23 (face font-lock-type-face c-type c-decl-id-start fontified t) 23 24 (fontified t) 24 28 (face font-lock-function-name-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 29 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 39 (fontified t)) . 1) (undo-tree-id3465 . -18) (undo-tree-id3466 . 2) (undo-tree-id3467 . -37) (undo-tree-id3468 . -1) (undo-tree-id3469 . -38) (undo-tree-id3470 . -38) (undo-tree-id3471 . -37) (undo-tree-id3472 . -38) (undo-tree-id3473 . -37) (undo-tree-id3474 . 2) (undo-tree-id3475 . -37) (undo-tree-id3476 . -37) (undo-tree-id3477 . -38) (undo-tree-id3478 . -38) (undo-tree-id3479 . -37) (undo-tree-id3480 . -37) (undo-tree-id3481 . -37) (undo-tree-id3482 . -37) (undo-tree-id3483 . -20) (undo-tree-id3484 . -37) (undo-tree-id3485 . -37) (undo-tree-id3486 . -37) (undo-tree-id3487 . -37) (undo-tree-id3488 . -37) (undo-tree-id3489 . -37) (undo-tree-id3490 . -37) (undo-tree-id3491 . -17) (undo-tree-id3492 . -17) (undo-tree-id3493 . -17) (undo-tree-id3494 . -37) (undo-tree-id3495 . -37) (undo-tree-id3496 . -37) (undo-tree-id3497 . -37) (undo-tree-id3498 . -37) (undo-tree-id3499 . -37) (undo-tree-id3500 . -35) (undo-tree-id3501 . -35) (undo-tree-id3502 . -15) (undo-tree-id3503 . -15) (undo-tree-id3504 . -15) (undo-tree-id3505 . -15) (undo-tree-id3506 . -15) (undo-tree-id3507 . -37) (undo-tree-id3508 . -37) (undo-tree-id3509 . -20) (undo-tree-id3510 . -20) (undo-tree-id3511 . -37) (undo-tree-id3512 . -37) (undo-tree-id3513 . -37) (undo-tree-id3514 . -37) (undo-tree-id3515 . -37) (undo-tree-id3516 . -37) (undo-tree-id3517 . -37) (undo-tree-id3518 . -37) (undo-tree-id3519 . -37) (undo-tree-id3520 . -37) (undo-tree-id3521 . -37) (undo-tree-id3522 . -37) (undo-tree-id3523 . -37) (undo-tree-id3524 . -37) (undo-tree-id3525 . -37) (undo-tree-id3526 . -37) (undo-tree-id3527 . -37) (undo-tree-id3528 . -37) (undo-tree-id3529 . -37) (undo-tree-id3530 . -37) (undo-tree-id3531 . -37) (undo-tree-id3532 . -37) (undo-tree-id3533 . -37) (undo-tree-id3534 . -37) (undo-tree-id3535 . -37) (undo-tree-id3536 . -37) (undo-tree-id3537 . -37) (undo-tree-id3538 . -37) (undo-tree-id3539 . -37) (undo-tree-id3540 . -37) (undo-tree-id3541 . -37) (undo-tree-id3542 . -37) (undo-tree-id3543 . -37) (undo-tree-id3544 . -37) (undo-tree-id3545 . -37) (undo-tree-id3546 . -37) (undo-tree-id3547 . -37) (undo-tree-id3548 . -37) (undo-tree-id3549 . -37) (undo-tree-id3550 . -37) (undo-tree-id3551 . -37) (undo-tree-id3552 . -37) (undo-tree-id3553 . -37) (undo-tree-id3554 . -37) (undo-tree-id3555 . -37) (undo-tree-id3556 . -37) (undo-tree-id3557 . -37) (undo-tree-id3558 . -37) (undo-tree-id3559 . -37) (undo-tree-id3560 . -37) (undo-tree-id3561 . -37) (undo-tree-id3562 . -37) (undo-tree-id3563 . -37) (undo-tree-id3564 . -37) (undo-tree-id3565 . -37) (undo-tree-id3566 . -37) (undo-tree-id3567 . -37) (undo-tree-id3568 . -37) (undo-tree-id3569 . -37) (undo-tree-id3570 . -37) (undo-tree-id3571 . -37) (undo-tree-id3572 . -37) (undo-tree-id3573 . -37) (undo-tree-id3574 . -37) (undo-tree-id3575 . -37) (undo-tree-id3576 . -37) (undo-tree-id3577 . -37) (undo-tree-id3578 . -37) (undo-tree-id3579 . -37) (undo-tree-id3580 . -37) (undo-tree-id3581 . -37) (undo-tree-id3582 . -37) (undo-tree-id3583 . -37) (undo-tree-id3584 . -37) (undo-tree-id3585 . -37) (undo-tree-id3586 . -37) (undo-tree-id3587 . -37) (undo-tree-id3588 . -37) (undo-tree-id3589 . -37) (undo-tree-id3590 . -37) (undo-tree-id3591 . -37) (undo-tree-id3592 . -37) (undo-tree-id3593 . -37) (undo-tree-id3594 . -37) (undo-tree-id3595 . -37) (undo-tree-id3596 . -37) (undo-tree-id3597 . -37) (undo-tree-id3598 . -37) (undo-tree-id3599 . -37) (undo-tree-id3600 . -37) (undo-tree-id3601 . -37) (undo-tree-id3602 . -37) (undo-tree-id3603 . -37) (undo-tree-id3604 . -37) (undo-tree-id3605 . -37) (undo-tree-id3606 . -37) (undo-tree-id3607 . -37) (undo-tree-id3608 . -37) (undo-tree-id3609 . -37) (undo-tree-id3610 . -37) (undo-tree-id3611 . -37) (undo-tree-id3612 . -37) (undo-tree-id3613 . -37) (undo-tree-id3614 . -37) (undo-tree-id3615 . -37) (undo-tree-id3616 . -37) (undo-tree-id3617 . -37) (undo-tree-id3618 . -37) (undo-tree-id3619 . -37) (undo-tree-id3620 . -37) (undo-tree-id3621 . -37) (undo-tree-id3622 . -37) (undo-tree-id3623 . -37) (undo-tree-id3624 . -37) (undo-tree-id3625 . -37) (undo-tree-id3626 . -38) (undo-tree-id3627 . -37) (undo-tree-id3628 . -37) (undo-tree-id3629 . -37) (undo-tree-id3630 . -37) (undo-tree-id3631 . -37) (undo-tree-id3632 . -37) (undo-tree-id3633 . -37) (undo-tree-id3634 . -37) (undo-tree-id3635 . -37) (undo-tree-id3636 . -37) (undo-tree-id3637 . -37) (undo-tree-id3638 . -37) (undo-tree-id3639 . -37) (undo-tree-id3640 . -37) (undo-tree-id3641 . -37) (undo-tree-id3642 . -37) (undo-tree-id3643 . -20) (undo-tree-id3644 . -20) (undo-tree-id3645 . -20) (undo-tree-id3646 . -20) (undo-tree-id3647 . -20) (undo-tree-id3648 . -20) (undo-tree-id3649 . -20) (undo-tree-id3650 . -20) (undo-tree-id3651 . -20) (undo-tree-id3652 . -20) (undo-tree-id3653 . -20) (undo-tree-id3654 . -20) (undo-tree-id3655 . -20) (undo-tree-id3656 . -20) (undo-tree-id3657 . -19) (undo-tree-id3658 . -19) (undo-tree-id3659 . -19) (undo-tree-id3660 . -19) (undo-tree-id3661 . -19) (undo-tree-id3662 . -19) (undo-tree-id3663 . -19) (undo-tree-id3664 . -37) (undo-tree-id3665 . -39)) nil (26052 33318 982237 182000) 0 nil])
([nil nil ((nil rear-nonsticky nil 417 . 418) (nil fontified nil 38 . 418) (nil fontified nil 36 . 38) (nil fontified nil 20 . 36) (nil fontified nil 19 . 20) (nil fontified nil 2 . 19) (nil fontified nil 1 . 2) (1 . 418)) nil (26052 33318 982114 533000) 0 nil])
([nil nil ((418 . 419) 1) nil (26052 33318 982110 105000) 0 nil])
([nil nil ((#("    int x, y;
    scanf(\"%d %d\", &x, &y);

    int i = 1;
    while (1) {
        
        int sq = pow(x,2);

        if(x<y) {
            printf(\"%d, \", sq);
            x++;
        }
        else if(x>y) {
            printf(\"%d, \", sq);
            x--;
        }
        else if(x==y) {
            printf(\"Reached!\");
            break;
        }
    }
    
" 0 4 (fontified t) 4 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face c-type c-decl-id-start fontified t) 7 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (c-type c-decl-id-start fontified t) 10 11 (fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 31 (face font-lock-string-face fontified t) 31 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 47 (fontified t) 47 49 (face font-lock-type-face fontified t) 49 50 (face font-lock-type-face c-type c-decl-id-start fontified t) 50 51 (fontified t) 51 52 (face font-lock-variable-name-face fontified t) 52 62 (fontified t) 62 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-2-face) fontified t) 73 91 (fontified t) 91 93 (face font-lock-type-face fontified t) 93 94 (face font-lock-type-face c-type c-decl-id-start fontified t) 94 95 (fontified t) 95 97 (face font-lock-variable-name-face fontified t) 97 103 (fontified t) 103 104 (face (rainbow-delimiters-depth-3-face) fontified t) 104 107 (fontified t) 107 108 (face (rainbow-delimiters-depth-3-face) fontified t) 108 119 (fontified t) 119 121 (face font-lock-keyword-face fontified t) 121 122 (face (rainbow-delimiters-depth-3-face) fontified t) 122 125 (fontified t) 125 126 (face (rainbow-delimiters-depth-3-face) fontified t) 126 127 (fontified t) 127 128 (face (rainbow-delimiters-depth-3-face) fontified t) 128 147 (fontified t) 147 148 (face (rainbow-delimiters-depth-4-face) fontified t) 148 154 (face font-lock-string-face fontified t) 154 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-4-face) fontified t) 159 186 (fontified t) 186 187 (face (rainbow-delimiters-depth-3-face) fontified t) 187 196 (fontified t) 196 200 (face font-lock-keyword-face fontified t) 200 201 (fontified t) 201 203 (face font-lock-keyword-face fontified t) 203 204 (face (rainbow-delimiters-depth-3-face) fontified t) 204 207 (fontified t) 207 208 (face (rainbow-delimiters-depth-3-face) fontified t) 208 209 (fontified t) 209 210 (face (rainbow-delimiters-depth-3-face) fontified t) 210 229 (fontified t) 229 230 (face (rainbow-delimiters-depth-4-face) fontified t) 230 236 (face font-lock-string-face fontified t) 236 240 (fontified t) 240 241 (face (rainbow-delimiters-depth-4-face) fontified t) 241 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-3-face) fontified t) 269 278 (fontified t) 278 282 (face font-lock-keyword-face fontified t) 282 283 (fontified t) 283 285 (face font-lock-keyword-face fontified t) 285 286 (face (rainbow-delimiters-depth-3-face) fontified t) 286 290 (fontified t) 290 291 (face (rainbow-delimiters-depth-3-face) fontified t) 291 292 (fontified t) 292 293 (face (rainbow-delimiters-depth-3-face) fontified t) 293 312 (fontified t) 312 313 (face (rainbow-delimiters-depth-4-face) fontified t) 313 323 (face font-lock-string-face fontified t) 323 324 (face (rainbow-delimiters-depth-4-face) fontified t) 324 338 (fontified t) 338 343 (face font-lock-keyword-face fontified t) 343 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-3-face) fontified t) 354 359 (fontified t) 359 360 (face (rainbow-delimiters-depth-2-face) fontified t) 360 366 (fontified t)) . 51) (undo-tree-id3795 . -42) (undo-tree-id3796 . -365) (undo-tree-id3797 . -42) (undo-tree-id3798 . -366) (undo-tree-id3799 . -366) (undo-tree-id3800 . -42) (undo-tree-id3801 . -42) (undo-tree-id3802 . -42) 93 (t 26052 33319 650 255000)) nil (26052 36075 203937 8000) 0 nil])
([nil nil ((#("#include<math.h>
" 0 1 (c-in-sws t face font-lock-preprocessor-face fontified t c-is-sws t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (c-in-sws t category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 9 15 (c-in-sws t face font-lock-string-face fontified t) 15 16 (c-in-sws t category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 16 17 (c-in-sws t fontified t)) . 19) (undo-tree-id3793 . -16) (undo-tree-id3794 . -16)) nil (26052 36075 203929 862000) 0 nil])
([nil current ((9 . 10)) nil (26052 36075 203916 870000) 0 nil])
nil
